import React, { useEffect, useRef, useState } from "react";
import * as d3 from "d3";
import { getObjectData } from '@/util/qlikConnection';

const HorizontalBarChartSec = ({ key, app, objectId, type, graphColor, onBarPointClick }) => {
  const svgRef = useRef(null);
  const divRef = useRef(null);
  const [barData, setBarData] = useState(null);
  const width = useRef(0);
  const height = useRef(0);

  useEffect(() => {
    var arr = [];
    console.log("bar chart");
    function renderQlikObject(objectId) {
      if (app) {
        getObjectData(app, objectId)
          .then((response) => {
            for (let i = 0; i < response.length; i++) {
              var obj = { name: '', value: 0 };
              for (let j = 0; j < response[i].length; j++) {
                obj.name = response[i][0].qText;
                obj.value = response[i][1].qNum;
              }
              arr.push(obj);
            }
            setBarData(arr);
          });
      }
    }
    renderQlikObject(objectId);
  }, [key, app, objectId]);

  const drawHorizontalBarChart = () => {
    if (!barData || barData.length === 0) return;

    const margin = { top: 20, right: 60, bottom: 20, left: 150 };
    const innerWidth = width.current - margin.left - margin.right;
    const innerHeight = height.current - margin.top - margin.bottom;

    // En büyük değeri bul (eğer tüm değerler 100'den küçükse, 100'ü baz al)
    const maxValue = Math.max(100, d3.max(barData, d => d.value));

    const xScale = d3.scaleLinear()
      .domain([0, maxValue])
      .range([0, innerWidth]);

    const yScale = d3.scaleBand()
      .domain(barData.map(d => d.name))
      .range([0, innerHeight])
      .padding(0.2);

    const svg = d3.select(svgRef.current)
      .attr("width", width.current)
      .attr("height", height.current);

    svg.selectAll("*").remove();

    const g = svg.append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    g.selectAll(".background-bar")
      .data(barData)
      .enter()
      .append("rect")
      .attr("class", "background-bar")
      .attr("x", 0)
      .attr("y", d => yScale(d.name))
      .attr("width", xScale(maxValue)) // Sabit genişlikte arkaplan
      .attr("height", yScale.bandwidth() / 3)
      .attr("fill", "lightgray")
      .attr("rx", 12)
      .attr("ry", 12);

    g.selectAll(".value-bar")
      .data(barData)
      .enter()
      .append("rect")
      .attr("class", "value-bar")
      .attr("x", 0)
      .attr("y", d => yScale(d.name))
      .attr("width", d => xScale(d.value)) // Normalleştirilmiş genişlik
      .attr("height", yScale.bandwidth() / 3)
      .attr("fill", graphColor)
      .attr("rx", 12)
      .attr("ry", 12)
      .on("click", (event, d) => {
        onBarPointClick(d.name);
      });

    g.selectAll("text")
      .data(barData)
      .enter()
      .append("text")
       .attr("x", d => xScale(maxValue) + 20)
      .attr("y", d => yScale(d.name) + yScale.bandwidth() / 2 - 20)
      .attr("alignment-baseline", "middle")
      .text(d => type === 'percentage' ? `${d.value.toFixed(0)}%` : `${d.value.toFixed(0)}`);

    const yAxis = d3.axisLeft(yScale).tickSize(0);
    g.append("g")
      .call(yAxis)
      .selectAll("text")
      .attr("transform", "translate(-5,-20)")
      .style('text-anchor', 'end')
      .text(d => d.length > 25 ? d.slice(0, 20) + "..." : d);

    g.select(".domain").remove();
  }
  useEffect(() => {
    if (divRef.current) {
        width.current = divRef.current.offsetWidth;
        height.current = divRef.current.offsetHeight;
    }
    drawHorizontalBarChart();
}, [app, barData]);

  return (
    <div ref={divRef} style={{ width: '100%', height: '300px' }}>
        <svg ref={svgRef}></svg>
    </div>
);};

export default HorizontalBarChartSec;
