if (appName) {

  addMenuItem("Favoriler", SVG.Apps, "");
  //*** favorite card işlemleri start ***
  getFavorites().then(async (favArr) => {
    // console.log("HOME PAGE GET FAVORITES APP : " + favArr)
    const favoriteArray = [];
    for (const favId of favArr) {
      const appArr = await getAppById(favId);
      if (appArr) {
        favoriteArray.push({
          name: appArr.name,
          publishTime: appArr.publishTime,
          thunmnail: appArr.thumbnail,
          description: appArr.description,
          favStatus: true,
          id: appArr.id
        });
      }
    }
    favoriteArray.forEach(app => {
      addSubMenuItem("Favoriler", app.name, app.id);
    });
  }).catch((error) => {
    console.error('Favori data hatası:', error);
  });
  //*** favorite card işlemleri end ***
  openApp(appName)
    .then((_app) => {
      getObjectData(_app, 'jpmS')
        .then((data) => {
          if (data) {
             const qlikTableArray = [];
            // streamName'leri kontrol etmek için bir nesne
            const streamMap = {};
      
            data.forEach(group => {
              const streamName = group[0].qText; // İlk elemanın qText değeri  (streamName)
              const streamId = group[1].qText; // İlk elemanın qText değeri  (streamId)
              const appName = group[2].qText; // 2. elemanın qText değeri  (appName)
              const appId = group[3].qText; // 3. elemanın qText değeri (appId)
              const sheetName = group[4].qText; // 4. elemanın qText değeri (sheetName)
              const sheetId = group[5].qText; // 5. elemanın qText değeri (sheetId)
              
              const sheet = {
                sheetName: sheetName,
                sheetId: sheetId
              };
              // Eğer streamName daha önce eklenmemişse
              if (!streamMap[streamName]) {
                addMenuItem(streamName, SVG.Apps, streamId);
                // Yeni bir kayıt oluştur
                streamMap[streamName] = {
                  streamName,
                  streamId,
                  apps: [{ appName, appId }],
                  sheets: [sheet]
                };
                qlikTableArray.push(streamMap[streamName]);
                addSubMenuItem(streamName, appName ,appId);
              } else {
                // Eğer appName yoksa ekle
                const existingApp = streamMap[streamName].apps.find(app => app.appName === appName);
                if (!existingApp) {
                  addSubMenuItem(streamName, appName,appId);
                  streamMap[streamName].apps.push({ appName, appId });
                }
              }
              // Sheet'leri ekle
              const existingSheet = streamMap[streamName].sheets.find(s => s.sheetName === sheet.sheetName);
              if (!existingSheet) {
                streamMap[streamName].sheets.push(sheet);
              }
      
            });
            addMenuItem("Useful Links", SVG.Apps, "");
            usefulLinks.forEach(link => {
              addSubMenuItem("Useful Links", link.name, link.id);
            });
            
            //console.log(menuContext);
            // console.log(qlikTableArray);
          }
        })
        .catch((error) => {
          console.error('Tablo verisi alma hatası:', error);
        });

        getObjectData(_app, 'bZjSh')
        .then((data) => {
          console.log(data)
        })
        .catch((error) => {
          console.error('Tablo verisi alma hatası:', error);
        }); 
    })
    .catch((error) => {
      console.error('Uygulama başlatma hatası:', error);
    });
}
