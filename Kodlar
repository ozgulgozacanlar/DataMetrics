useEffect(() => {
  console.log("bookmarks güncellemesi başlatıldı");

  async function fetchFrequentlyUsingApps() {
    if (bookmarks) {
      try {
        const frequentlyUsingArray = await Promise.all(
          bookmarks.map(async (group) => {
            const appId = group[2].qText; // appId al
            const appArr = await getAppById(appId); // Asenkron veri çek
            if (appArr) {
              return {
                name: appArr.name,
                publishTime: appArr.publishTime,
                thumbnail: appArr.thumbnail,
                description: appArr.description,
                id: appArr.id,
              };
            }
            return null;
          })
        );

        const validApps = frequentlyUsingArray.filter(app => app !== null); // Null olanları filtrele
        setFrequentlyUsingApps((prevData) => {
          const filteredData = validApps.filter(item =>
            !prevData.some(prev => prev.name === item.name)
          );
          return [...prevData, ...filteredData];
        });

      } catch (error) {
        console.error('Asenkron işlem sırasında hata:', error);
      } finally {
        setLoading(false); // Burada işlemler bitince loading'i kapat
      }
    } else {
      setLoading(false); // Eğer bookmarks boşsa işlemleri sonlandır
    }
  }

  fetchFrequentlyUsingApps();
}, [bookmarks]);
