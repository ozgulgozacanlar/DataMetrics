import axios from 'axios';

let xrfKey = import.meta.env.VITE_REACT_APP_XRF_KEY;
let axiosIns = axios.create({
    baseURL: import.meta.env.VITE_QLIK_SERVER,
    withCredentials: true,
    headers: {
        'X-Qlik-Xrfkey':xrfKey,
        'Access-Control-Allow-Origin' : '*'
    }
})

export async function getApps() {
    try {
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=stream.customProperties.definition.name eq 'CustomHub'&orderby=publishTime desc`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getAppById(id) {
    try {
        const res = await axiosIns.get(`qrs/app/${id}?xrfkey=${xrfKey}`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getSheetById(id) {
    try {
        const res = await axiosIns.get(`qrs/app/object?xrfkey=${xrfKey}&filter=app.id eq ${id} and objectType eq 'sheet' and published eq true`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getLastPublishedApps() {
    try {
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=stream ne null&orderby=publishTime desc`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getTabInfo() {
    try {
        const res = await axiosIns.get(`qrs/stream/full?xrfkey=${xrfKey}&filter=(customProperties.definition.name eq 'CustomHub')`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getStreams() {
    try {
        const res = await axiosIns.get(`qrs/stream/full?xrfkey=${xrfKey}&filter=(customProperties.definition.name eq 'CustomHub')`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
}

export async function getStreamById(id) {
    try {
        const queryFilter = `(stream.id eq ${id}) or (stream.id eq ${id})`;
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=${queryFilter}&orderby=name asc`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }   
}

export async function getStream(id) {
    try {
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=(stream.id eq ${id})`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }   
}

export async function getStreamAll() {
    try {
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=stream ne null`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getStreamWithKey() {
    try {
        const res = await axiosIns.get(`qrs/app/full?xrfkey=${xrfKey}&filter=stream.customProperties ne null`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getFavorites() {
    try {
        const res = await axiosIns.get(`qrs/user/favorites?xrfkey=${xrfKey}`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function toggleFavorites(id, status) {
    try {
        const res = status 
                        ? await axiosIns.delete(`qrs/user/favorites/${id}?xrfkey=${xrfKey}`)
                        : await axiosIns.put(`qrs/user/favorites/${id}?xrfkey=${xrfKey}`)
        return res.data; 
    } catch (error) {
        console.log(error);
    }
}

export async function deletefavorites(id) {
    try {
        const res = await axiosIns.delete(`qrs/user/favorites/${id}?xrfkey=${xrfKey}`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}
export async function addfavorites(id) {
    try {
        const res = await axiosIns.put(`qrs/user/favorites/${id}?xrfkey=${xrfKey}`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getBannerMessage() {
    try {
        const res = await axiosIns.get(`api/hub/v1/custombannermessages`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function getUser() {
    try {
        const res = await axiosIns.get(`qps/user`);
        sessionStorage.setItem('user_id', res.data.userId)
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}

export async function logout() {
    try {
        const res = await axiosIns.delete(`qps/user?xrfkey=${xrfKey}`);
        return true;
    } catch (error) {
        console.log(error);
    }
   
}

export async function getUserUri(userId,directory) {
    try {
        const res = await axiosIns.get(`qrs/session/full?filter=userId eq '${userId}' and userDirectory eq '${directory}'?xrfkey=${xrfKey}`);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}


export async function getAudit() {
    try {
        var bodyData = {
            "resourceType": "App",
            "resourceRef": {
                "resourceFilter": "(published eq True)"
            },
            "subjectRef": {
              "resourceFilter": `(userId eq '${sessionStorage.getItem('user_id')}')`
            },
            "actions": 2,
            "environmentAttributes": "context=AppAccess;",
            "subjectProperties": [
              "id",
              "name",
              "userId",
              "userDirectory"
            ],
            "auditLimit": 9999,
            "outputObjectsPrivileges": 0,
            "resourceProperties": [
              "name"
            ]
          };

        const res = await axiosIns.post(`qrs/SystemRule/Security/audit/matrix?xrfkey=${xrfKey}`,bodyData);
        return res.data; 
    } catch (error) {
        console.log(error);
    }
   
}
