import { useEffect, useState } from 'react';
import { Link } from "react-router-dom";
import { openApp } from '@/util/qlikConnection';
import { DetailTable, PageMainButton, Loader } from '@/components';
import { BackIcon } from '@/assets/svg';

export default function DataGovernanceDetails() {

  const [app, setApp] = useState();
  const [objectId, setObjectId] = useState("MgYzdjP");
  const [randomKey, setRandomKey] = useState(Math.random());
  const [selectedOption, setSelectedOption] = useState('firstTable');
  const [isLoading, setLoading] = useState(true);
  const [childrenLoaded, setChildrenLoaded] = useState({
    child1: false
  });

  useEffect(() => {
    if (!app) {
      openApp(import.meta.env.VITE_APP_APP1)
        .then((_app) => {
          _app.clearAll().then(() => {
            setApp(_app);
          })       

        })
        .catch((error) => {
          console.error('Uygulama başlatma hatası:', error);
        });
    }

  }, [app])

  const handleTabClick = (selectedTab) => {
    setSelectedOption(selectedTab);
  };
  useEffect(() => {
    setRandomKey(Math.random());

    if (selectedOption === 'firstTable') {
      setObjectId('MgYzdjP');
    } else {
      setObjectId('esKa');
    }
  }, [selectedOption]);
  // component  load olma durumu burada kontrol ediliyor. Eğer component load olmuşsa childrenLoaded parametresi true olarak duzenleniyor.
  const handleChildLoaded = (key) => {
    if (app && (!Object.values(childrenLoaded).every(value => value === true))) {
      setChildrenLoaded((prev) => ({
        ...prev,
        [key]: true,
      }));
    } else {
      return;
    }
  };

  useEffect(() => {
    // `childrenLoaded`'taki tüm öğeler `true` olduğunda `isLoading`'i `false` yap
    const allLoaded = Object.values(childrenLoaded).every(value => value === true) ? true : false;
    if (allLoaded) {
      // Bütün childs yüklendiğinde loader'ı kaldır.
      // Timeout olmadığında componentlerden hızlı cevap geldiğinde loader olmadan açılıyordu.
      setTimeout(() => { setLoading(false); }, 1500);
    }
  }, [childrenLoaded]); // `childrenLoaded` her değiştiğinde kontrol edilir

  return (
    <> 
    {isLoading && (
          <div className="fixed-loader">
            <Loader />
          </div>
        )}
        <div style={{ display: isLoading ? 'none' : 'block' }}>
          <div className="d-flex mt-3" >
            <Link className="d-flex text-decoration-none" to="/data-governance">
              <PageMainButton icon={<BackIcon />} title="Geri" />
            </Link>
          </div>
          <div className="row mt-3 row-gap-3">
            <div className="col-12 d-flex flex-column">
              <div className="card p-0">
                <div className="card-title-wrapper d-flex align-items-center justify-content-between p-3">
                  <div className="card-title">120 - DQ Score</div>
                  <div className="tab-options">
                    <span
                      className={`tab-option ${selectedOption === 'firstTable' ? 'active' : ''}`}
                      onClick={() => handleTabClick('firstTable')}
                    >
                      Data Governance
                    </span>
                    <span
                      className={`tab-option ${selectedOption === 'secondTable' ? 'active' : ''}`}
                      onClick={() => handleTabClick('secondTable')}
                    >
                      İş Biriminde Açılan STG Tablolar
                    </span>
                  </div>
                </div>
                <div className='table-container'>
                  <DetailTable app={app} objectId={objectId} filterChange={randomKey} onLoaded={() => handleChildLoaded('child1')}/>
                </div>  
                {/* <DetailTable /> */}
              </div>
            </div>
          </div>
      </div>
    </>
  );
}
   getObjectData(app, objectId).then((response) => {
        if (!response) {
          console.error('TableChart Component : response verisi boş veya tanımsız.');
          return;
        }
        const tableDatas = response.map(item => {
          return item.map(innerItem => innerItem.qText);  // innerItem içindeki qText değerini alıyoruz
        });
        setTableDataArray(tableDatas);
        if (onLoaded) { 
          setTimeout(() => { onLoaded(); }, 250); 
        }
