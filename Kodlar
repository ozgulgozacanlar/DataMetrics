import React, { useState, useEffect } from "react";

const App = () => {
  const [userName, setUserName] = useState('');
  const [themePreference, setThemePreference] = useState('light');
  const [isLoading, setIsLoading] = useState(false);
  const [app, setApp] = useState(null);

  useEffect(() => {
    // Qlik Sense'e bağlanma
    const qlikApp = window.require(['js/qlik'], function (qlik) {
      const app = qlik.openApp('your-app-id', {
        url: "http://qlik-sense-server"
      });
      setApp(app);
    });

    return () => {
      if (app) {
        app.close();
      }
    };
  }, []);

  // Inline Load kullanarak veri eklemek
  const handleSave = () => {
    setIsLoading(true);

    if (!app) {
      console.error('Qlik Sense bağlantısı kurulamadı.');
      return;
    }

    // Inline Load Script ile veri gönderme
    const script = `
      LOAD * INLINE [
        UserName, ThemePreference
        '${userName}', '${themePreference}'
      ];
    `;

    // Script'i Qlik Sense'e gönderme
    app.setScript(script)
      .then(() => {
        return app.doReload();
      })
      .then(() => {
        console.log("Veri başarıyla Qlik Sense'e kaydedildi.");
        setIsLoading(false);

        // Veriler yüklendikten sonra tabloyu güncelleme
        updateTableData();
      })
      .catch((error) => {
        console.error('Veri kaydetme hatası: ', error);
        setIsLoading(false);
      });
  };

  // Tabloyu güncelleme işlemi
  const updateTableData = () => {
    if (!app) {
      console.error('Uygulama bağlantısı mevcut değil');
      return;
    }

    // Tabloyu almak için objenin ID'sini kullanıyoruz
    app.visualization.get('your-table-object-id').then((vis) => {
      // Görselleştirmeyi güncelleyebiliriz, fakat yeni veri eklemek için veri modelini kullanmamız gerekiyor
      vis.refresh().then(() => {
        console.log('Tablo başarıyla güncellendi.');
      }).catch((error) => {
        console.error('Tablo güncellenemedi:', error);
      });
    }).catch((error) => {
      console.error('Görselleştirme objesini alma hatası:', error);
    });
  };

  return (
    <div>
      <h1>Qlik Sense Tablosunu Güncelle</h1>

      <form onSubmit={(e) => { e.preventDefault(); handleSave(); }}>
        <div>
          <label htmlFor="userName">Kullanıcı Adı: </label>
          <input
            type="text"
            id="userName"
            value={userName}
            onChange={(e) => setUserName(e.target.value)}
            required
          />
        </div>

        <div>
          <label htmlFor="theme">Tema Tercihi: </label>
          <select
            id="theme"
            value={themePreference}
            onChange={(e) => setThemePreference(e.target.value)}
            required
          >
            <option value="light">Light</option>
            <option value="dark">Dark</option>
          </select>
        </div>

        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Yükleniyor...' : 'Tabloyu Güncelle'}
        </button>
      </form>
    </div>
  );
};

export default App;


var script = "LOAD Sales FROM [lib://data/sample.xlsx];";
var app = qlik.openApp("2abac31e-3b46-4b78-8bxf-c5cea1d2514d", config);
app.setScript(script).then( function(result){
  console.log(result);
});
var script = "Load Chr(RecNo()+Ord('A')-1) as Alpha, RecNo() as Num autogenerate 26;"
var app = qlik.openApp("2abac31e-3b46-4b78-8bxf-c5cea1d2514d", config);
app.setScript(script).then( function(result){
  console.log(result);
});
