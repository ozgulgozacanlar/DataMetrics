
Konfigürasyon ve API Yapılandırması

// Qlik bağlantı konfigürasyonu için varsayılan değer
const DEFAULT_HOST = 'qlikprod';

const qConfig = {
  host: DEFAULT_HOST,
  isSecure: true,
  port: 443,
  prefix: '/'
};

/**
 * @description
 * Bu fonksiyon, Qlik için temel konfigürasyonu oluşturur.
 * @param {string} [host] - Qlik server'ının host adresi.
 * @returns {QConfig} - Qlik konfigürasyonunu içeren bir nesne döner.
 */
export function createQlikConfig(host?: string): QConfig {
  return {
    host: host ?? DEFAULT_HOST, 
    isSecure: true,
    port: 443,
    prefix: '/',
  };
}

/**
 * @description
 * Bu fonksiyon, verilen Qlik konfigürasyonunu kullanarak, tam bir temel URL oluşturur.
 * @param {QConfig} config - Qlik uygulaması için konfigürasyon nesnesi.
 * @returns {string} - Oluşturulmuş olan tam temel URL.
 */
export function createBaseUrl(config: QConfig): string {
  return `${config.isSecure ? 'https://' : 'http://'}${config.host}${config.port ? `:${config.port}` : ''}${config.prefix}resources`;
}

/**
 * @description
 * Bu fonksiyon, `require.js` yapılandırmasını yapar.
 * @param {string} baseUrl - `require.js`'in temel URL'si.
 * @returns {void} - Yapılandırma işlemini gerçekleştirir.
 */
export function configureRequireJs(baseUrl: string): void {
  document.addEventListener('DOMContentLoaded', () => {
    window.require.config({
      baseUrl,
      paths: {
        qlik: `${baseUrl}/js/qlik`
      }
    });
  });
}
Qlik API İşlevleri

/**
 * @description
 * Bu fonksiyon, `appId` ile Qlik uygulamasını başlatır.
 * @param {string} appId - Açılacak Qlik uygulamasının kimliği.
 * @param {string | any} [hostOrConfig] - Opsiyonel parametre, host adresi ya da config nesnesi.
 * @returns {Promise<any>} - Qlik uygulamasına bağlanma işlemini temsil eden bir Promise döner.
 */
export async function openApp(appId: string, hostOrConfig?: string | any): Promise<any> {
  let config: any;
  if (typeof hostOrConfig === 'string') {
    config = createQlikConfig(hostOrConfig); 
  } else if (typeof hostOrConfig === 'object') {
    config = { ...createQlikConfig(), ...hostOrConfig };
  } else {
    config = createQlikConfig();
  }

  const baseUrl = createBaseUrl(config);
  configureRequireJs(baseUrl);
  
  return getQlikApp(appId, config);
}

/**
 * @description
 * Bu fonksiyon, Qlik uygulamasına bağlanmak için kullanılır.
 * @param {string} appId - Qlik uygulama kimliği
 * @param {any} config - Qlik konfigürasyon ayarları
 * @returns {Promise<any>} - Qlik uygulamasını döner.
 */
export async function getQlikApp(appId: string, config: any): Promise<any> {
  const qlik = await qlikAPI;
  return qlik.openApp(appId, config);
}

/**
 * @description
 * Qlik nesnesinden hypercube verilerini alır ve qMatrix olarak döner.
 * @param {QlikApp} app - Qlik App nesnesi
 * @param {String} objectId - Nesne kimliği
 * @returns {Promise<HyperCubeData>} - Objenin hypercube verisi
 */
export function getObjectData(app: QlikApp, objectId: string): Promise<HyperCubeData> {
  return new Promise((resolve) => {
    getObjectModel(app, objectId).then((_model: QlikModel) => {
      const qWidth = _model.layout.qHyperCube.qSize.qcx;
      const qHeight = Math.floor(10000 / _model.layout.qHyperCube.qSize.qcx);

      _model.getHyperCubeData('/qHyperCubeDef', [
        { qTop: 0, qLeft: 10, qWidth, qHeight }
      ]).then((_data: any) => {
        resolve(_data[0].qMatrix);
      });
    });
  });
}

/**
 * @description
 * Qlik nesnesinden pivot tablo verilerini alır.
 * @param {QlikApp} app - Qlik App nesnesi
 * @param {String} objectId - Nesne kimliği
 * @returns {Promise<HyperCubePivotData>} - Pivot tablo verisini döndürür.
 */
export function getObjectPivotTableData(app: QlikApp, objectId: string): Promise<HyperCubePivotData> {
  return new Promise((resolve) => {
    getObjectModel(app, objectId).then((_model: QlikModel) => {
      const qWidth = _model.layout.qHyperCube.qSize.qcx;
      const qHeight = Math.floor(10000 / _model.layout.qHyperCube.qSize.qcx);

      _model.getHyperCubePivotData('/qHyperCubeDef', [
        { qTop: 0, qLeft: 0, qWidth, qHeight }
      ]).then((_data: any) => {
        resolve(_data[0] as HyperCubePivotData);
      });
    });
  });
}
Global Fonksiyonlar

/**
 * Global bir `require` tanımlaması yapılmaktadır.
 */
export const qlikAPI: Promise<Qlik> = new Promise((resolve) => {
  document.addEventListener('DOMContentLoaded', () => {
    window.require(['js/qlik'], (qlik: Qlik) => {
      resolve(qlik);
    });
  });
});

/**
 * @description
 * Bu fonksiyon, sağlanan bir API'yi döndüren basit bir yardımcı fonksiyondur.
 * @param {any} api - Kullanılacak API.
 * @returns {any} - Sağlanan API'yi döndürür.
 */
export const useQlikAPI = (api: any) => {
  return api;
};
