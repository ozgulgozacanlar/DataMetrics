    .call(d3.axisBottom(xScale).ticks(0).tickSize(0))  // tickSize(0) ile çizgileri kaldırıyoruz
g.selectAll(".x-axis text")
    .text(function(d) {
        // Eğer metin 10 karakterden uzun ise, 10 karaktere kadar kısaltıp '...' ekle
        return d.length > 10 ? d.substring(0, 10) + '...' : d;
    })
    .style("text-anchor", "middle")
    .style("font-size", "12px");

barsGroup
  .selectAll("rect")
  .data((d) => d.slice(1))
  .enter()
  .append("rect")
  .attr("x", (_, i) => x1(i))
  .attr("y", (d) => y(d.qNum))
  .attr("width", x1.bandwidth())
  .attr("height", (d) => height - y(d.qNum))
  .attr("fill", (_, i) => {
    let color = i % 2 === 0 ? "#2c84cc" : "#a4c48c";  
    if(graphicName === 'hacimselGelisim'){ 
      color = barCounter % 2 === 0 ? "#2c84cc" : "#a4c48c"; 
      barCounter++;       
    }    
    return color;  
  })
  .on("click", (event, d) => {
    // Tıklanan çubuğun ismini al (örneğin qText veya başka bir alan)
    const clickedValue = d.qText; // Tıklanan barın değerini alıyoruz (d.qText veya başka bir uygun alan olabilir)

    // Qlik objesine filtre atmak
    if (app) {
      app.field("UnitName").selectValues([clickedValue], true); // "UnitName" alanında seçimi uygula
    }

    // (Opsiyonel) Tıklanan çubuğun rengini değiştirme
    d3.select(event.currentTarget)
      .attr("fill", "#ff6347"); // Kırmızıya boyama
  });

.on("click", (event, d) => {
    // Tıklanan bar çubuğunun verisini al
    const clickedData = d;
    
    // Burada clickedData ile istediğiniz işlemi gerçekleştirebilirsiniz
    console.log("Tıklanan veri: ", clickedData);
    
    // Örneğin, tıklanan bar çubuğunun rengini değiştirebilirsiniz:
    d3.select(event.currentTarget)
      .attr("fill", "#ff6347"); // Örneğin kırmızıya boyama

    // Burada bir başka işlem de yapılabilir, örneğin tıklanan veriyi bir üst bileşene gönderebilirsiniz.
  });
