import { useState, useEffect } from 'react';
import { getFilterList } from '@/util/qlikConnection';
import './ComboBox.css';

export default function ComboBox({ app, onChange }) {
  const [selectedValue, setSelectedValue] = useState('');
  const [options, setOptions] = useState([]);
  const [cardTitle, setCardTitle] = useState("");

  const renderQlikTableObject = (objectId) => {    
    if (app) {          
      app.getObject(objectId).then((model) => {
        let titles = model.layout.title.trim();
        if(titles === ""){
          if(model.genericType == "table"){
            titles = model.layout.qHyperCube.qDimensionInfo[0].qFallbackTitle;
         }
         else if(model.genericType == "linechart"){
            titles = model.layout.title;
         }
         else if(model.genericType== "action-button"){
           titles = model.layout.style.label;
         }
        }          
        setCardTitle(titles);
      });
    } else {
      // console.error('Qlik Sense app is not loaded yet');
    }
  }

  useEffect(() => {
    renderQlikTableObject(objectId);
  }, [app, objectId]);

  useEffect(() => {
    const selectedOption = options.find((option) => option.qState === 'S');
    if (selectedOption) {
      setSelectedValue(selectedOption.text);
    }
  }, [options]);

  const handleChange = (event) => {
    const newValue = event.target.value;
    setSelectedValue(newValue);
    onChange(newValue,filterItem,groupId);
  };

  const truncateText = (text, maxLength = 30) => {
    return text.length > maxLength ? text.slice(0, maxLength) + '...' : text;
  };

  return (
    options != null ? (
      <div className="combobox-container ml-2">
        <select
          value={selectedValue}
          onChange={handleChange}
          className="combobox"
        >
          {options.map((option, index) => (
            <option
              key={index}
              value={option.text}
              className="combobox-option"
              title={option.text} // Full text as a tooltip
            >
              {truncateText(option.text)}
            </option>
          ))}
        </select>
      </div>
    ) : (
      <></>
    )
  );
}

