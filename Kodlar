import React, { useState, useEffect } from 'react';
import TableWithPoint from './TableWithPoint'; // TableWithPoint bileşenini import ediyoruz.

const MyComponent = ({ app }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0); // Yüklenen bileşen sayısı

  const totalComponents = 4; // Toplam bileşen sayısı (2 TableWithPoint ve 2 MultiBarChart)

  const handleDataLoaded = () => {
    setLoadedCount(prevCount => prevCount + 1); // Yüklenen bileşen sayısını artır
  };

  useEffect(() => {
    if (loadedCount === totalComponents) {
      setIsLoading(false);  // Tüm bileşenler yüklendiğinde loader'ı kaldır
    }
  }, [loadedCount]); // Yüklenen bileşen sayısı değiştikçe çalışacak

  return (
    <div className="container-fluid mt-4">
      {isLoading ? (
        <div className="fixed-loader">
          <Loader />
        </div>
      ) : (
        <>
          <div className="row mt-3">
            <div className="col-12 col-xxl-6 d-flex flex-column">
              <div className="card flex-grow-1">
                <CardTitle app={app} objectId={"LZReE"} />
                <TableWithPoint
                  app={app}
                  objectId={"gWQgq"}
                  page={"gosas"}
                  onDataLoaded={handleDataLoaded}  // Callback fonksiyonu ekliyoruz
                />
              </div>
            </div>
            <div className="col-12 col-xxl-6 d-flex flex-column">
              <div className="card flex-grow-1">
                <MultiBarChart
                  app={app}
                  objectId={"MjjweZ"}
                  onDataLoaded={handleDataLoaded}  // Callback fonksiyonu ekliyoruz
                />
              </div>
            </div>
          </div>

          <div className="row mt-3">
            <div className="col-12 col-xxl-6 d-flex flex-column">
              <div className="card flex-grow-1">
                <CardTitle app={app} objectId={"uPmN"} />
                <TableWithPoint
                  app={app}
                  objectId={"PRdmzGt"}
                  page={"gosas"}
                  onDataLoaded={handleDataLoaded}  // Callback fonksiyonu ekliyoruz
                />
              </div>
            </div>
            <div className="col-12 col-xxl-6 d-flex flex-column">
              <div className="card flex-grow-1">
                <MultiBarChart
                  app={app}
                  objectId={"NdVtG"}
                  onDataLoaded={handleDataLoaded}  // Callback fonksiyonu ekliyoruz
                />
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default MyComponent;


import React, { useState, useEffect } from 'react';

function TableWithPoint({ app, objectId, page, overflowStatus, onDataLoaded }) {
  const [tableHeaderData, setTableHeaderData] = useState(null);
  const [headerFirstText, setHeaderFirstText] = useState(null);
  const [tableData, setTableData] = useState(null);
  const styles = {
    overflowStyle: {
      maxHeight: overflowStatus ? '290px' : '',
      overflow: overflowStatus ? 'auto' : ''
    }
  };

  useEffect(() => {
    if (app) {
      app.getObject(objectId).then((model) => {
        setTableHeaderData(model.layout.qHyperCube.qMeasureInfo);
        setHeaderFirstText(model.layout.qHyperCube.qDimensionInfo[0].qFallbackTitle);
      });

      getObjectData(app, objectId).then((data) => {
        const combinedArr = data;
        setTableData(combinedArr);
        if (onDataLoaded) {
          onDataLoaded();  // Veri yüklendikten sonra callback çağrılır
        }
      });
    }
  }, [app, objectId, onDataLoaded]);

  function mapColorCode(inputColor) {
    const colorMap = {
      "#82b740": "#7CA444", // Old green => New green
      "#ffc820": "#DC9465", // Old yellow => New yellow
      "#1973b8": "#126EB5", // Old blue => New blue
      "#ef4761": "#D46364"  // Old red => New red
    };

    return colorMap[inputColor.toLowerCase()] || inputColor;
  }

  return (
    <div className='table-with-point' style={styles.overflowStyle}>
      <table className={`table table-bordered table-striped combined-table ${"table-" + page}`}>
        <thead>
          <tr>
            <th key={Math.random()}>{headerFirstText}</th>
            {tableHeaderData ? tableHeaderData.map((item, index) => (
              <th key={index} className="text-center">{item.qFallbackTitle}</th>
            )) : null}
          </tr>
        </thead>
        <tbody>
          {tableData ? tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <td key={cellIndex} className="text-center" style={{ border: 'none' }}>
                  {cellIndex === 1 || cellIndex === 2 || cellIndex === 3 ? (
                    <span
                      style={{
                        display: 'inline-block',
                        width: '10px',
                        height: '10px',
                        borderRadius: '50%',
                        backgroundColor: cell.qAttrExps.qValues[0].qText ? mapColorCode(cell.qAttrExps.qValues[0].qText) : "",
                      }}
                    ></span>
                  ) : (
                    (cellIndex > 3 ? <span>{cell.qText}</span> : cell.qText)
                  )}
                </td>
              ))}
            </tr>
          )) : null}
        </tbody>
      </table>
    </div>
  );
}

export default TableWithPoint;
