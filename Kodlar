export function getObjectBigData(app, objectId) {

  return new Promise((resolve, reject) => {
    getObjectModel(app, objectId).then((_model) => {
      const qWidth = _model.layout.qHyperCube.qSize.qcx;
      const totalRows = _model.layout.qHyperCube.qSize.qcy; // Toplam satır sayısı
      const maxRowsPerFetch = Math.floor(10000 / qWidth);
      let qTop = 0;
      const fetchedData = [];

      function fetchChunk() {
        const qHeight = Math.min(maxRowsPerFetch, totalRows - qTop);

        _model
          .getHyperCubeData('/qHyperCubeDef', [
            {
              qTop,
              qLeft: 0,
              qWidth,
              qHeight,
            },
          ])
          .then((_data) => {
            fetchedData.push(..._data[0].qMatrix); // Gelen veriyi birleştir
            qTop += qHeight; // Bir sonraki başlangıç noktasını ayarla

            if (qTop < totalRows) {
              // Eğer tüm veri alınmadıysa, tekrar çağır
              fetchChunk();
            } else {
              // Tüm veri alındığında çözümle
              resolve(fetchedData);
            }
          })
          .catch(reject);
      }

      fetchChunk();
    }).catch(reject);
  });
}
