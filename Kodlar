// Bu fonksiyon, her bir öğeye bir id ekler. Eğer öğenin 'id' özelliği yoksa,
// o zaman 'row-index' şeklinde bir id atar.
const addIdsToData = (data) => {
  return data.map((item, index) => {
    // Her öğenin kopyasını alıyoruz ve 'id' özelliğini ekliyoruz.
    const newItem = { ...item, id: item.id || `row-${index}` };

    // Eğer öğenin alt öğeleri (children) varsa, bu alt öğeler üzerinde de
    // aynı işlemi uygulamak için recursive olarak bu fonksiyonu çağırıyoruz.
    if (newItem.children && newItem.children.length > 0) {
      newItem.children = addIdsToData(newItem.children); // Alt öğeleri işliyoruz
    }

    // İşlenen öğeyi döndürüyoruz.
    return newItem;
  });
};

// Verilen 'data' dizisini işleyip her öğeye 'id' ekleyip döndürür.
const updatedData = addIdsToData(data);

// Bu fonksiyon, tüm satır anahtarlarını (row keys) toplar.
// Eğer öğenin alt öğeleri varsa, onların anahtarlarını da ekler.
// 'parentKey', her öğenin anahtarını tanımlamak için yardımcı olur.
const collectAllRowKeys = (items, parentKey = '') => {
  let keys = [];

  // 'items' dizisindeki her öğe için:
  items.forEach((item) => {
    // 'parentKey' varsa, öğenin anahtarını 'parentKey' ile birleştiriyoruz.
    // Eğer 'parentKey' yoksa, sadece öğenin 'id'sini kullanıyoruz.
    const currentKey = parentKey ? `${parentKey}-${item.id}` : `${item.id}`;

    // Bu anahtarı diziye ekliyoruz.
    keys.push(currentKey);

    // Eğer öğenin alt öğeleri varsa (children), bu alt öğelerin anahtarlarını
    // toplamak için recursive olarak fonksiyonu çağırıyoruz.
    if (item.children.length > 0) {
      keys = [...keys, ...collectAllRowKeys(item.children, currentKey)];
    }
  });

  // Tüm anahtarları döndürüyoruz.
  return keys;
};

// İlk açılışta tüm satırların açılmasını sağlamak için:
// 1. updatedData üzerinde tüm satır anahtarlarını topluyoruz.
// 2. Tüm anahtarları 'expandedRows' durumuna set ediyoruz, böylece tüm satırlar açık gelir.
useEffect(() => {
  const allRowKeys = collectAllRowKeys(updatedData);  // Tüm anahtarları topluyoruz
  setExpandedRows(allRowKeys); // İlk açılışta tüm satırları açıyoruz
}, []);

// Bu fonksiyon, bir satırın açılıp kapanmasını sağlar. Eğer satır zaten açıksa,
// onu kapatır; eğer kapalıysa, onu açar. Anahtar olarak 'id' ve 'parentId' kullanılır.
const toggleRow = (id, parentId = '') => {
  // 'id' ve 'parentId' birleşiminden oluşan bir anahtar oluşturuyoruz.
  const key = parentId ? `${parentId}-${id}` : `${id}`;

  // 'expandedRows' durumunu güncelliyoruz:
  // - Eğer 'expandedRows' içinde bu anahtar varsa, onu kaldırıyoruz (satır kapanır).
  // - Eğer yoksa, ekliyoruz (satır açılır).
  setExpandedRows((prevState) =>
    prevState.includes(key)
      ? prevState.filter((rowId) => rowId !== key)  // Satır kapatılıyor
      : [...prevState, key]  // Satır açılıyor
  );
};
