import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

const MultiBarChart = ({ data }) => {
  const svgRef = useRef(null);
  const chartContainerRef = useRef(null);

  const [svgSize, setSvgSize] = useState({ width: 0, height: 0 });

  // Boyutları güncelleyen fonksiyon
  const updateDimensions = () => {
    if (chartContainerRef.current) {
      setSvgSize({
        width: chartContainerRef.current.offsetWidth, // div'in genişliği
        height: chartContainerRef.current.offsetHeight, // div'in yüksekliği
      });
    }
  };

  // Responsive tasarım için boyutları güncelleyen effect
  useEffect(() => {
    updateDimensions(); // İlk boyutlandırmayı yap
    window.addEventListener('resize', updateDimensions); // Pencere boyutu değiştiğinde boyutları güncelle

    return () => {
      window.removeEventListener('resize', updateDimensions); // Temizleme işlemi
    };
  }, []);

  // Çizim fonksiyonu
  const drawBarChart = () => {
    if (data.length === 0) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove(); // SVG içeriğini temizle

    const margin = { top: 20, right: 30, bottom: 40, left: 40 };
    const width = svgSize.width - margin.left - margin.right;
    const height = svgSize.height - margin.top - margin.bottom;

    svg
      .attr("width", svgSize.width)
      .attr("height", svgSize.height);

    const x0 = d3.scaleBand().rangeRound([0, width]).padding(0.1);
    const x1 = d3.scaleBand().padding(0.05);
    const y = d3.scaleLinear().rangeRound([height, 0]);

    const categories = data.map(d => d[0].qText);
    const series = data[0].slice(1).map((d, i) => i);

    // Set domains
    x0.domain(categories);
    x1.domain(series).rangeRound([0, x0.bandwidth()]);
    y.domain([0, d3.max(data, d => d3.max(d.slice(1), e => e.qNum))]);

    // Çubukları çiz
    svg.append('g')
      .selectAll('g')
      .data(data)
      .enter().append('g')
      .attr('transform', (d, i) => `translate(${x0(categories[i])}, 0)`)
      .selectAll('rect')
      .data(d => d.slice(1))
      .enter().append('rect')
      .attr('x', (d, i) => x1(i))
      .attr('y', d => y(d.qNum))
      .attr('width', x1.bandwidth())
      .attr('height', d => height - y(d.qNum))
      .attr('fill', (d, i) => i % 2 === 0 ? 'steelblue' : 'orange');

    // X eksenini çiz
    svg.append('g')
      .attr('class', 'x-axis')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(x0));

    // Y eksenini çiz
    svg.append('g')
      .attr('class', 'y-axis')
      .call(d3.axisLeft(y));
  };

  useEffect(() => {
    if (data.length > 0 && svgSize.width > 0 && svgSize.height > 0) {
      drawBarChart();
    }
  }, [data, svgSize]);

  return (
    <div ref={chartContainerRef} style={{ width: '100%', height: '300px' }}>
      <svg ref={svgRef} style={{ width: '100%', height: '100%' }}></svg>
    </div>
  );
};

export default MultiBarChart;
