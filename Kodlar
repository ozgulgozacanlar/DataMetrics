import { useState } from 'react';
import HorizontalBarCard from './HorizontalBarCard'; // HorizontalBarCard component'ini içeri aktarıyoruz

function NPL({ app }) {
  const [kpi, setKPI] = useState({ header: '', value: '' });  // Net Durum'u tutacak state

  return (
    <div className="row total-retired-row row-gap-3">
      <HorizontalBarCard app={app} objectId={'YbFJyFj'} onKPIChange={setKPI} />

      <div className="col-12 col-md-6 col-xl d-flex flex-column">
        <div className="salary-status-card">
          <MoneyBag />
          <div className="d-flex flex-column row-gap-2">
            <span className="title">{kpi.header}</span> {/* Net Durum'un başlığını göster */}
            <span className="kpi">{kpi.value}</span> {/* Net Durum'un değerini göster */}
          </div>
        </div>
      </div>
    </div>
  );
}

export default NPL;

import { useEffect, useState } from 'react';
import { getObjectData } from '@/util/qlikConnection';
import './HorizontalBarCard.css';

function HorizontalBarCard({ app, objectId, onKPIChange }) {
  const [tableHeaderData, setTableHeaderData] = useState(null);
  const [tableDataArray, setTableDataArray] = useState(null);
  const [groupDataArray, setGroupDataArray] = useState(null);
  const [kpi, setKPI] = useState({ header: '', value: '' });  // KPI için state

  useEffect(() => {
    function renderQlikTableObject(objectId) {
      if (app) {
        getObjectData(app, objectId).then((response) => {
          if (!response) {
            console.error('TableChart Component : response verisi boş veya tanımsız.');
            return;
          }
          const tableDatas = response.map(item => {         
            return item.map(innerItem => innerItem.qText);  // innerItem içindeki qText değerini alıyoruz
          });

          setTableDataArray(response[0]);

        }).catch((error) => {
          console.error('TableChart Component : getObjectData() methodu veri alınırken hata oluştu:', error);
        });
        //Tablo header bilgileri alınıyor
        app.getObject(objectId).then((model) => { 
          if (!model) {
            console.error('TableChart Component : model verisi boş veya tanımsız.');
            return;
          }
          const dimensionTitles = model.layout.qHyperCube.qDimensionInfo.map(item => item.qFallbackTitle);
          const measureTitles = model.layout.qHyperCube.qMeasureInfo.map(item => item.qFallbackTitle);

          const combinedTitles = [...dimensionTitles, ...measureTitles];
          setTableHeaderData(combinedTitles);
        }).catch((error) => {
          console.error('TableChart Component : getObject() methodu veri alınırken hata oluştu:', error);
        });
      }
    }
    renderQlikTableObject(objectId);
  }, [app, objectId]);

  useEffect(() => {
    const groupData = (data, headers) => {
      if (data == null || headers == null) return;
      console.log(data);
      const groups = [];
      let currentGroup = [];
      let groupIndex = 0;

      data.forEach((item, index) => {
        if (headers[groupIndex] === " ") {
          if (currentGroup.length > 0) {
            groups.push(currentGroup);  // Önceki grup varsa ekleyelim
          }
          currentGroup = [];
          groupIndex++;
        } else {
          if (item.qText !== "-") {
            currentGroup.push({ header: headers[groupIndex], value: item.qText });             
          }
          groupIndex++;
        }
      });

      if (currentGroup.length) {
        groups.push(currentGroup); // Son grubu ekleyelim
      }
      return groups;
    };

    const groupedData = groupData(tableDataArray, tableHeaderData);
    setGroupDataArray(groupedData);
  }, [tableHeaderData, tableDataArray]);

  useEffect(() => {
    if (!groupDataArray) return;
    const netDurumItem = groupDataArray.flat().find(item => item.header === 'Net Durum');
    if (netDurumItem) {
      setKPI({ header: netDurumItem.header, value: netDurumItem.value });
      if (onKPIChange) onKPIChange({ header: netDurumItem.header, value: netDurumItem.value });
    }
  }, [groupDataArray, onKPIChange]);

  return (
    <>
      {groupDataArray && groupDataArray.map((group, groupIndex) => {
        const lastItem = group[group.length - 1];
        const firstTwoItems = group.slice(0, 2);

        return (
          <div key={groupIndex} className="col-12 col-md-6 col-xl d-flex flex-column flex-grow-1">
            <div className="horizontal-bar-card">
              <div className="horizontal-bar-card-row">
                <span className="title">{lastItem.header}</span>
                <span className="kpi">{lastItem.value}</span>
              </div>
              <div className="horizontal-bar-row">
                {firstTwoItems.map((item, index) => {
                  const percentage = (parseFloat(item.value.replace(/,/g, '')) / firstTwoItems.reduce((total, i) => total + parseFloat(i.value.replace(/,/g, '')), 0)) * 100;
                  return (
                    <div key={index} style={{ width: `${percentage}%`, backgroundColor: index === 0 ? '#1464a5' : '#7da246' }}>&nbsp;</div>
                  );
                })}
              </div>
              <div className="horizontal-bar-card-row">
                {firstTwoItems.map((item, index) => (
                  <span key={index} className="kpi">{item.value}</span>
                ))}
              </div>
              <div className="horizontal-bar-card-row">
                {firstTwoItems.map((item, index) => (
                  <span key={index} className="title-secondary">{item.header}</span>
                ))}
              </div>
            </div>
          </div>
        );
      })}
    </>
  );
}

export default HorizontalBarCard;
