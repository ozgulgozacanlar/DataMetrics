import { useEffect, useState } from 'react';
import { getObjectData } from '@/util/qlikConnection';
import { Loader } from '@/components';
import { capitalizeFirstLetter } from '@/util/helper';
import './DetailTable.css';


export default function DetailTable({app, objectId, onLoaded, filterChange}) {

    
  const [tableHeaderData, setTableHeaderData] = useState(null);
  const [tableDataArray, setTableDataArray] = useState(null);

  const renderQlikTableObject = (objectId) => {
    if (app) {
      console.log(filterChange)
      getObjectData(app, objectId).then((response) => {
        if (!response) {
          console.error('TableChart Component : response verisi boş veya tanımsız.');
          return;
        }
          const tableDatas = response.map(item => {         
          return item.map(innerItem => innerItem.qText);  // innerItem içindeki qText değerini alıyoruz
        });
        setTableDataArray(tableDatas);
        setTimeout(() => { onLoaded(); }, 250);
      }).catch((error) => {
        console.error('TableChart Component : getObjectData() methodu veri alınırken hata oluştu:', error);
      });
      //Tablo header bilgileri alınıyor
      app.getObject(objectId).then((model) => { 
        if (!model) {
          console.error('TableChart Component : model verisi boş veya tanımsız.');
          return;
        }
        // `qDimensionInfo` ve `qMeasureInfo` öğelerinin `qFallbackTitle` değerlerini alıp birleştiriyoruz.
        const dimensionTitles = model.layout.qHyperCube.qDimensionInfo.map(item => item.qFallbackTitle);
        const measureTitles = model.layout.qHyperCube.qMeasureInfo.map(item => item.qFallbackTitle);

        // `qDimensionInfo` öğelerini ilk sıraya, `qMeasureInfo` öğelerini sonra ekliyoruz.
        let combinedTitles = [...dimensionTitles, ...measureTitles];
        setTableHeaderData(combinedTitles);
      }).catch((error) => {
        console.error('TableChart Component : getObject() methodu veri alınırken hata oluştu:', error);
      });
    } else {
      // console.error('Qlik Sense app is not loaded yet');
    }
  }
  useEffect(() => {  
    renderQlikTableObject(objectId);
  }, [app, objectId,filterChange]);

  return (
    <>
      {tableDataArray ? (
        <table className="detail-table">
          <thead>
            <tr>
              {tableHeaderData && tableHeaderData.map((header, index) => (
                <th scope="col" key={index}>
                  {header}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {tableDataArray.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {row.map((cell, cellIndex) => (
                  <td key={cellIndex}>{capitalizeFirstLetter(cell)}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <Loader />
      )}
     </>
  );
}
