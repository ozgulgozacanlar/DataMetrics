import { useEffect, useState } from 'react';
import { getObjectData } from '@/util/qlikConnection';
import './TableWithPoint.css'

function TableWithPoint({ app, objectId, page, overflowStatus  }) {
  const [tableHeaderData, setTableHeaderData] = useState(null);
  const [headerFirstText, setHeaderFirstText] = useState(null);
  const [tableData, setTableData] = useState(null);
  const styles = {
    overflowStyle: {
       maxHeight: overflowStatus ? '290px' : '',
       overflow:overflowStatus ? 'auto' : '' 
    }};

  useEffect(() => {
    if(app){
      app.getObject(objectId).then((model) => {
        setTableHeaderData(model.layout.qHyperCube.qMeasureInfo);
        setHeaderFirstText(model.layout.qHyperCube.qDimensionInfo[0].qFallbackTitle);
      })
        getObjectData(app,objectId).then((data) => {
          const combinedArr = data;
          setTableData(combinedArr);
        })
    }
   
  }, [app,objectId]);

    /**
   * Maps an input color code to a corresponding mapped color.
   * If the input color code is not found in the map, returns the input color itself.
   *
   * @param {string} inputColor - The input color code to map.
   * @returns {string} - The mapped color code or the input color if no match is found.
   */
  function mapColorCode(inputColor) {
    const colorMap = {
        "#82b740": "#7CA444", // Old green => New green
        "#ffc820": "#DC9465", // Old yellow => New yellow
        "#1973b8": "#126EB5", // Old blue => New blue
        "#ef4761": "#D46364"  // Old red => New red
    };

    return colorMap[inputColor.toLowerCase()] || inputColor;
  }

  return (
    <>
      <div className='table-with-point' style={styles.overflowStyle}>
        <table className={`table table-bordered table-striped combined-table ${"table-"+ page }`}>
          <thead>
            <tr>
              <th key={Math.random()}>{headerFirstText}</th>
              {tableHeaderData != null ? tableHeaderData.map((item, index) => (
                <th key={index} className="text-center">{item.qFallbackTitle}</th>
              )) : <></>}
            </tr>
          </thead>
          <tbody>
            {tableData != null ? tableData.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {row.map((cell, cellIndex) => (
                  <td key={cellIndex} className="text-center" style={{ border: 'none' }}>
                    {(cellIndex == 1 || cellIndex == 2 || cellIndex == 3) ? (
                      <span
                        style={{
                          display: 'inline-block',
                          width: '10px',
                          height: '10px',
                          borderRadius: '50%',
                          backgroundColor: cell.qAttrExps.qValues[0].qText != null ? mapColorCode(cell.qAttrExps.qValues[0].qText) : "",

                        }}
                      ></span>
                    ) : (
                      (cellIndex > 3 ? <span>{cell.qText}</span> : cell.qText)

                    )}
                  </td>
                ))}
              </tr>
            )) : <></>}
          </tbody>
        </table>
      </div>

    </>
   
  );
}

export default TableWithPoint;
