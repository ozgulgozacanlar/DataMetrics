import { useState, useEffect } from 'react';
import FilterComboBox from './FilterComboBox';  // Import et
import { getFilterDateNumber } from './utils';  // Örnek bir import
import './DataGovernanceDetails.css';

export default function DataGovernanceDetails() {
  const [app, setApp] = useState();
  const [objectId, setObjectId] = useState("MgYzdjP");
  const [randomKey, setRandomKey] = useState(Math.random());
  const [selectedOption, setSelectedOption] = useState('firstTable');
  const [selectedGroupId, setSelectedGroupId] = useState('group1');
  const [isLoading, setLoading] = useState(true);
  const [childrenLoaded, setChildrenLoaded] = useState({ child1: false });
  const [resetFilters, setResetFilters] = useState(false);  // Yeni state

  useEffect(() => {
    if (!app) {
      openApp(import.meta.env.VITE_APP_APP1)
        .then((_app) => {
          _app.clearAll().then(() => {
            setApp(_app);
          });
        })
        .catch((error) => {
          console.error('Uygulama başlatma hatası:', error);
        });
    }
  }, [app]);

  const handleClearAll = () => {
    setLoading(true);
    app.clearAll(true).then(() => {
      setApp(app);  // app'i güncelle
      setResetFilters(true);  // FilterComboBox'ı sıfırla
      setTimeout(() => {
        setLoading(false);
      }, 100);
    });
  };

  // Tab seçim değişikliklerini işlemek
  useEffect(() => {
    if (selectedOption === 'firstTable') {
      setObjectId('MgYzdjP');
    } else {
      setObjectId('esKa');
    }
    setTimeout(() => {
      setRandomKey(Math.random());
    }, 50);
  }, [selectedOption]);

  const handleClickBack = (selectedTab, groupId) => {
    setSelectedOption(selectedTab);
    setSelectedGroupId(groupId);
  };

  return (
    <>
      {isLoading && (
        <div className="fixed-loader">
          <Loader />
        </div>
      )}
      <div style={{ display: isLoading ? 'none' : 'block' }}>
        <div className="d-flex justify-content-end mt-3">
          <div className="page-main-button" onClick={handleClickBack}>
            <BackIcon /> Geri
          </div>
          <div className="nav-button me-2" onClick={() => handleClearAll()}>
            <ClearFilterIcon />
          </div>
        </div>
        
        {/* Filtreleme objeleri */}
        <div className="combobox-wrapper">
          <FilterComboBox
            app={app}
            filterItem="RECORD_DATE_DG_DETAIL"
            onChange={handleClickFilterCombobox}
            headerTitle="Record Date"
            resetFilters={resetFilters}  // resetFilters'ı props olarak geç
          />
          <FilterComboBox
            app={app}
            filterItem="BUSINESS_LINE_DG_DETAIL"
            onChange={handleClickFilterCombobox}
            headerTitle="Business Line"
            resetFilters={resetFilters}  // resetFilters'ı props olarak geç
          />
          {/* Diğer FilterComboBox bileşenleri */}
        </div>

        {/* Tablo ve diğer içerikler */}
        <div className="table-container">
          <QlikObject
            objectId={objectId}
            app={app}
            elementId={`qlik-object-data-govenance-table-${objectId}`}
            filterChange={randomKey}
            onLoaded={() => handleChildLoaded('child1')}
          />
        </div>
      </div>
    </>
  );
}
