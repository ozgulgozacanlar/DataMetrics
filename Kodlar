  const drawComboChart = () => {

        if (dataBar.length === 0 && dataLine.length === 0) return;


        const svg = d3.select(svgRef.current)

        svg.selectAll("*").remove()

    

    // Margin ve boyutlar
    const margin = { top: 20, right: 80, bottom: 60, left: 80 }; // Sağda ve solda daha fazla boşluk
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    svg.attr('width', 600)
    .attr('height', 400)
    .append('g')
    .attr('transform', 'translate(50, 50)');


   // Zaman verisini parse etmek için yardımcı fonksiyon
   const parseDate = d3.timeParse("%b-%y");  // "%b-%y" Jan-23 gibi formatları işlemek için


   // Ortak X eksenis
   const x = d3.scaleTime()
   .domain(d3.extent(dataBar, d => parseDate(translateMonthToEnglish(d.date))))  // Türkçe tarihleri İngilizce'ye çevirip parse ediyoruz
   .range([15, width]);

   // Y eksenleri
   const yBar = d3.scaleLinear()
     .domain([0, d3.max(dataBar, d => d.value)])
     .nice()
     .range([height, 0]);

   const yLine1 = d3.scaleLinear()
     .domain([0, d3.max(dataLine, d => d.value1)])
     .nice()
     .range([height, 0]);

   const yLine2 = d3.scaleLinear()
     .domain([0, d3.max(dataLine, d => d.value2)])
     .nice()
     .range([height, 0]);

     const chartGroup = svg
      .append("g")
      .attr("transform", `translate(${margin.left}, ${margin.top})`); 
   // X ekseni çizimi
   const xAxis = d3.axisBottom(x)
   .tickValues(   // Her bir tarih sadece bir kez görünsün
   Array.from(new Set(dataBar.map(d => {
       const translatedDate = translateMonthToEnglish(d.date);
       const parsedDate = parseDate(translatedDate);
       return parsedDate ? parsedDate.getTime() : null;  // null kontrolü ekleniyor
    })))
        .filter(d => d !== null)  // null değerleri atıyoruz
        .map(d => new Date(d))  // Set içerisindeki tarihleri tekrar Date objelerine dönüştürüyoruz
    )
    .tickFormat(d3.timeFormat("%b %y"))  // Ay ve yıl formatında gösterecek şekilde düzenliyoruz
    .tickSize(0);

    
    chartGroup.append('g')
     .attr('transform', `translate(0, ${height})`)
     .call(xAxis)
     

   // Y eksenleri
   chartGroup.append('g')
     .attr('class', 'y-axis-left')
     .call(d3.axisLeft(yBar));

   // Sağ Y ekseni (line chart için)
   chartGroup.append('g')
     .attr('class', 'y-axis-right')
     .attr('transform', `translate(${width}, 0)`)
     .call(d3.axisRight(yLine1));

   // Bar Chart çizimi
   chartGroup.selectAll('.bar')
     .data(dataBar)
     .enter()
     .append('rect')
     .attr('class', 'bar')
     .attr('x', (d, i) => x(parseDate(translateMonthToEnglish(d.date))) - (width / dataBar.length) / 2) // Barı ortalayalım
     .attr('y', d => yBar(d.value))
     .attr('width', width / dataBar.length - 10) // Barların genişliği
     .attr('height', d => height - yBar(d.value))
     .attr('fill', 'steelblue');

   // Line Chart çizimi
   const line1 = d3.line()
     .x(d => x(parseDate(translateMonthToEnglish(d.date))))
     .y(d => yLine1(d.value1));

   const line2 = d3.line()
     .x(d => x(parseDate(translateMonthToEnglish(d.date))))
     .y(d => yLine2(d.value2));

     chartGroup.append('path')
     .data([dataLine])
     .attr('class', 'line1')
     .attr('d', line1)
     .attr('fill', 'none')
     .attr('stroke', '#2b85c9')
     .attr('stroke-width', 2);

     chartGroup.append('path')
     .data([dataLine])
     .attr('class', 'line2')
     .attr('d', line2)
     .attr('fill', 'none')
     .attr('stroke', '#f06d06')
     .attr('stroke-width', 2);

    }
