export default function HorizontalBarChart({ app, objectId, graphicName }) {
    const svgRef = useRef(null);
    const [data, setData] = useState([]); // Gelen veri burada tutuluyor
    const [visibleData, setVisibleData] = useState([]); // Görünür verileri tutacak olan state
    const [currentIndex, setCurrentIndex] = useState(0); // Görünür veri miktarını kontrol eden index

    function renderBarChartQlikObject(objectId) {
        if (app) {
            getObjectData(app, objectId).then((response) => {
                const incomingData = response.map(item => ({
                    value: parseFloat(item[0].qText),
                    name: item[1].qText,
                }));
                setData(incomingData);
                setVisibleData(incomingData.slice(0, 5)); // İlk 5 veri ile başla
                setCurrentIndex(5); // İlk adımda 5 veriyi yükle
            });
        }
    }

    useEffect(() => {
        renderBarChartQlikObject(objectId);
    }, [app, objectId]);

    useEffect(() => {
        drawHorizontalBarChart();
    }, [visibleData]);

    const handleScroll = (e) => {
        const scrollPosition = e.target.scrollTop; // Scroll pozisyonunu al
        if (scrollPosition + e.target.clientHeight >= e.target.scrollHeight) {
            // Scroll sonuna yaklaştığında yeni veri yükleyin
            if (currentIndex < data.length) {
                const newIndex = Math.min(currentIndex + 5, data.length);
                setVisibleData(data.slice(0, newIndex));
                setCurrentIndex(newIndex);
            }
        }
    };

    const drawHorizontalBarChart = () => {
        if (visibleData.length === 0) return;

        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove();

        const margin = { top: 0, right: 20, bottom: 20, left: 35 };
        const width = svg.node().getBoundingClientRect().width - margin.left - margin.right;
        const height = 1000;

        svg
            .attr("width", width)
            .attr("height", height);

        const xScale = d3.scaleLinear()
            .domain([0, d3.max(visibleData, (d) => d.value)])
            .range([0, width - margin.left - margin.right]);

        const yScale = d3.scaleBand()
            .domain(visibleData.map(d => d.name))
            .range([margin.top, height - margin.bottom])
            .padding(0.3);

        const g = svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        g.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(xScale).ticks(0))
            .selectAll(".domain")
            .attr("stroke", "white")
            .attr("stroke-width", 2);

        g.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(yScale).ticks(0))
            .selectAll(".tick line")
            .remove();

        g.selectAll(".y-axis .domain")
            .attr("stroke", "white");

        const bars = g.selectAll(".bar")
            .data(visibleData);

        bars.enter()
            .append("rect")
            .attr("class", "bar")
            .attr("x", 0)
            .attr("y", (d) => yScale(d.name))
            .attr("width", (d) => xScale(d.value))
            .attr("height", yScale.bandwidth())
            .attr("fill", (d) => {
                if (graphicName === "Bolge") return "#2b85c9";
                if (graphicName === "Sube") return "#a1c789";
                return "#2b85c9";
            });

        bars.enter()
            .append("text")
            .attr("class", "value")
            .attr("x", (d) => xScale(d.value) + 5)
            .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 2.5)
            .attr("dy", ".35em")
            .text((d) => d.name);
    };

    return (
        <div
            style={{ width: "100%", height: "300px", overflowY: "scroll" }}
            onScroll={handleScroll}
        >
            <svg ref={svgRef} style={{ width: "100%" }}></svg>
        </div>
    );
}
