

  const [expandedRows, setExpandedRows] = useState([]);

  // Satır açma/kapama işlevi
  const toggleRow = (id, parentId = '') => {
    const key = parentId ? `${parentId}-${id}` : `${id}`;
    const expandedKeys = expandedRows.includes(key)
      ? expandedRows.filter(rowId => rowId !== key) // Eğer satır zaten açıksa, kapatıyoruz
      : [...expandedRows, key]; // Eğer kapalıysa, açıyoruz

    // Eğer ana satır kapatılıyorsa, altındaki tüm satırları da kapatalım
    const allKeysToToggle = getAllChildKeys(key, data);
    if (expandedRows.includes(key)) {
      // Eğer ana satır kapatılıyorsa, alt satırları da kapatalım
      setExpandedRows(prevState =>
        prevState.filter(rowId => !allKeysToToggle.includes(rowId)) // Alt satırları da çıkart
      );
    } else {
      // Ana satır açılıyorsa, sadece ana satırı açıyoruz
      setExpandedRows(expandedKeys);
    }
  };

  // Tüm alt öğeleri almak için yardımcı fonksiyon
  const getAllChildKeys = (parentKey, data) => {
    let keys = [parentKey];
    const [parentId, ...parentPath] = parentKey.split('-');
    const findChildren = (items, currentPath) => {
      items.forEach((item, index) => {
        const itemKey = `${currentPath}-${index}`;
        keys.push(itemKey); // Alt öğe ekle
        if (item.children && item.children.length > 0) {
          findChildren(item.children, itemKey); // Alt öğe varsa, onun altındaki öğeleri de al
        }
      });
    };

    // Ana öğenin children'larına bakıyoruz
    const parentData = findItemById(data, parentId);
    if (parentData) {
      findChildren(parentData.children, parentKey);
    }

    return keys;
  };

  // ID'ye göre öğe bulma fonksiyonu
  const findItemById = (data, id) => {
    for (let item of data) {
      if (item.id.toString() === id) return item;
      if (item.children && item.children.length > 0) {
        const found = findItemById(item.children, id);
        if (found) return found;
      }
    }
    return null;
  };

  // Satır render fonksiyonu
  const renderRow = (item, parentId = '') => (
    <React.Fragment key={item.id}>
      <tr>
        <td>
          {item.children.length > 0 && (
            <button
              className="btn btn-info btn-sm ms-2"
              type="button"
              onClick={() => toggleRow(item.id, parentId)}
            >
              {expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) ? '-' : '+'}
            </button>
          )}
          {item.name}
        </td>
        {item.data.map((value, index) => (
          <td key={index}>{value}</td>
        ))}
      </tr>
      {item.children.length > 0 && expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) && (
        item.children.map((child, index) => renderRow(child, `${parentId}-${item.id}-${index}`)) // Her child'a benzersiz key
      )}
    </React.Fragment>
  );

  return (
    <div className="container mt-5">
      <div className="col-md-12">
        <div className="panel panel-default">
          <div className="panel-heading">Datametrics Table</div>
          <div className="panel-body">
            <table className="table table-condensed table-striped">
              <thead>
                <tr>
                  <th></th>
                  <th></th>
                  <th>Son 6 Ay Trend</th>
                  <th>2023 Aralık</th>
                  <th>2024 Ağustos</th>
                  <th>2024 Eylül</th>
                  <th>2024 Ekim</th>
                  <th>2024 Kasım</th>
                </tr>
              </thead>
              <tbody>
                {data.map(item => renderRow(item))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DynamicEmployeeTable;
