// Interface'ler ve Tip Tanımlamaları

export interface QlikApp {
  getObject: (elementId: string, objectId: string, options?: { noSelections?: boolean }) => Promise<unknown>;
}

export interface Qlik {
  openApp: (appId: string, config: any) => QlikApp;
}

export interface HyperCubePivotData {
  qData: Array<Array<{ qText: string }>>;
  qLeft: Array<{ qText: string }>;
}

export interface QConfig {
  host: string;
  port: number;
  prefix: string;
  isSecure: boolean;
}

export interface HyperCubeData {
  qMatrix: Array<Array<{ qText: string; qNum: number }>>;
}

export interface QlikModel {
  layout: {
    qHyperCube: {
      qSize: {
        qcx: number; // width
        qcy: number; // height
      };
    };
  };
  getHyperCubeData: (
    def: string,
    data: Array<{ qTop: number; qLeft: number; qWidth: number; qHeight: number }>
  ) => Promise<HyperCubeData>;
  getHyperCubePivotData: (
    def: string,
    data: Array<{ qTop: number; qLeft: number; qWidth: number; qHeight: number }>
  ) => Promise<HyperCubePivotData>;
}




// Qlik API ile Uygulama Etkileşimi Fonksiyonları

export function createQlikConfig(host?: string): QConfig {
  return {
    host: host ?? DEFAULT_HOST,
    isSecure: true,
    port: 443,
    prefix: '/',
  };
}

export async function openApp(appId: string, hostOrConfig?: string | any): Promise<any> {
  let config: any;
  if (typeof hostOrConfig === 'string') {
    config = createQlikConfig(hostOrConfig);
  } else if (typeof hostOrConfig === 'object') {
    config = { ...createQlikConfig(), ...hostOrConfig };
  } else {
    config = createQlikConfig();
  }

  const baseUrl = createBaseUrl(config);
  configureRequireJs(baseUrl);
  return getQlikApp(appId, config);
}

export async function getQlikApp(appId: string, config: any): Promise<any> {
  const qlik = await qlikAPI;
  return qlik.openApp(appId, config);
}


// API Yapılandırma ve Bağlantı Kurulumu

export const qlikAPI: Promise<Qlik> = new Promise((resolve) => {
  document.addEventListener('DOMContentLoaded', () => {
    window.require(['js/qlik'], (qlik: Qlik) => {
      resolve(qlik);
    });
  });
});

export function configureRequireJs(baseUrl: string): void {
  document.addEventListener('DOMContentLoaded', () => {
    window.require.config({
      baseUrl,
      paths: {
        qlik: `${baseUrl}/js/qlik`,
      },
    });
  });
}

export function createBaseUrl(config: QConfig): string {
  return `${config.isSecure ? 'https://' : 'http://'}${config.host}${config.port ? `:${config.port}` : ''}${config.prefix}resources`;
}
