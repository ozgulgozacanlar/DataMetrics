 // Benzersiz id eklemek için veri yapısını düzenleyebiliriz
  const addIdsToData = (data) => {
    return data.map((item, index) => {
      // Eğer item'da id yoksa, benzersiz bir id oluşturuyoruz
      const newItem = { ...item, id: item.id || `row-${index}` };
      if (newItem.children && newItem.children.length > 0) {
        newItem.children = addIdsToData(newItem.children); // Alt öğeler için de aynı işlemi yapıyoruz
      }
      return newItem;
    });
  };

  const updatedData = addIdsToData(data); // Veriye id'leri ekliyoruz

  // Satır açma/kapama işlevi
  const toggleRow = (id, parentId = '') => {
    const key = parentId ? `${parentId}-${id}` : `${id}`;
    setExpandedRows((prevState) =>
      prevState.includes(key)
        ? prevState.filter((rowId) => rowId !== key)
        : [...prevState, key]
    );
  };

  // Satır render fonksiyonu
  const renderRow = (item, parentId = '') => (
    <React.Fragment key={item.id}>
      <tr key={item.id}>
        <td>
          {item.children.length > 0 && (
            <button
              className="btn btn-info btn-sm ms-2"
              type="button"
              onClick={() => toggleRow(item.id, parentId)}
            >
              {expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) ? '-' : '+'}
            </button>
          )}
          {item.name}
        </td>
        {item.data.map((value, index) => (
          <td key={index}>{value}</td>
        ))}
      </tr>
      {item.children.length > 0 &&
        expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) &&
        item.children.map((child, index) =>
          renderRow(child, `${parentId}-${item.id}-${index}`)
        )}
    </React.Fragment>
  );

  // İlk renderda tüm satırları açıyoruz
  useEffect(() => {
    const allRowKeys = [];

    // Tüm ana veriler için key'leri alıyoruz
    const collectKeys = (items, parentKey = '') => {
      items.forEach((item) => {
        const currentKey = parentKey ? `${parentKey}-${item.id}` : `${item.id}`;
        allRowKeys.push(currentKey);
        if (item.children.length > 0) {
          collectKeys(item.children, currentKey); // Alt öğeler için aynı işlemi tekrar ediyoruz
        }
      });
    };

    collectKeys(updatedData); // Ana data üzerinden key'leri alıyoruz
    setExpandedRows(allRowKeys); // İlk açılışta tüm satırları açıyoruz
  }, []); // Bu useEffect yalnızca bileşen ilk kez render edildiğinde çalışır

  return (
    <div className="container mt-5">
      <div className="col-md-12">
        <div className="panel panel-default">
          <div className="panel-heading">Datametrics Table</div>
          <div className="panel-body">
            <table className="table table-condensed table-striped">
              <thead>
                <tr>
                  <th></th>
                  <th></th>
                  <th>Son 6 Ay Trend</th>
                  <th>2023 Aralık</th>
                  <th>2024 Ağustos</th>
                  <th>2024 Eylül</th>
                  <th>2024 Ekim</th>
                  <th>2024 Kasım</th>
                </tr>
              </thead>
              <tbody>{updatedData.map((item) => renderRow(item))}</tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
