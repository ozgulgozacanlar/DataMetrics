   <div>
      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <div className="modal-title">NPL MÜŞTERİ LİSTESİ</div>
        </Modal.Header>
        <Modal.Body>
          <div className="row justify-content-center">
            <div className="col-12 col-xl-6 d-flex flex-column">
              <div className="card">
                <div className="card-title">STOK</div>
                <div className="modal-table-wrapper">
                  <ModalTable app={app} objectId={"CpJhSq"} overflowStatus={true}/>
                </div>
              </div>
            </div>
          </div>
          <div className="row row-gap-3 mt-3">
            <div className="col-12 col-xl-6 d-flex flex-column">
              <div className="card">
                <div className="card-title">ARTAN</div>
                <div className="modal-table-wrapper">
                  <ModalTable app={app} objectId={"PSTaQC"} overflowStatus={true}/>
                </div>
              </div>
            </div>
            <div className="col-12 col-xl-6 d-flex flex-column">
              <div className="card">
                <div className="card-title">AZALAN</div>
                <div className="modal-table-wrapper">
                  <ModalTable app={app} objectId={"ZjppbhC"} overflowStatus={true}/>
                </div>
              </div>
            </div>
          </div>
        </Modal.Body>
      </Modal>  
      </div>

import { useEffect, useState } from 'react';
import { getObjectData, getObjectModel } from '@/util/qlikConnection';
import './ModalTable.css';

function ModalTable({app, objectId, overflowStatus}) {
  const [tableHeaderData, setTableHeaderData] = useState(null);
  const [tableData, setTableData] = useState(null);
  // Tablo height çok uzun olduğu durumlarda true olarak düzenlenebilir.
  // Eğer true kullanılırsa 290px sonrası scroll edilir.
  const styles = {
    overflowStyle: {
       maxHeight: overflowStatus ? '280px' : '',
       overflow:  overflowStatus ? 'auto' : '',
    }};

  useEffect(() => {
    if(app){
      getObjectModel(app, objectId).then((model) => {

        console.log(model);
        if (!model) {
          console.error('ModalTable Component : model verisi boş veya tanımsız.');
          return;
        }
        
        const secondArr = model.layout.qHyperCube.qMeasureInfo;
        const newArr = model.layout.qHyperCube.qDimensionInfo.concat(secondArr);

        // Benzersiz elemanları saklamak için bir Map kullanıyoruz
        const uniqueMap = new Map();

        newArr.forEach((item) => {
            if (!uniqueMap.has(item.qFallbackTitle)) {
                uniqueMap.set(item.qFallbackTitle, item);
            }
        });

        const uniqueArr = Array.from(uniqueMap.values());
        setTableHeaderData(uniqueArr);
      }).catch((error) => {
        console.error('ModalTable Component : getObject() methodu veri alınırken hata oluştu:', error);
      });
      getObjectData(app, objectId).then((data) => {
     
        if (!data || data.length === 0) {
          console.log('Veri boş geldi');
          return;
        }
        const combinedArr = data;
        setTableData(combinedArr);
       
      }).catch((error) => {
        console.error('ModalTable Component : getObjectData() methodu veri alınırken hata oluştu:', error); 
      });
    }
   
  }, [app,objectId]);

  /**
   * Maps an input color code to a corresponding mapped color.
   * If the input color code is not found in the map, returns the input color itself.
   *
   * @param {string} inputColor - The input color code to map.
   * @returns {string} - The mapped color code or the input color if no match is found.
   */
  function mapColorCode(inputColor) {
    const colorMap = {
        "#82b740": "#7CA444", // Old green => New green
        "#ffc820": "#DC9465", // Old yellow => New yellow
        "#1973b8": "#126EB5", // Old blue => New blue
        "#ef4761": "#D46364"  // Old red => New red
    };

    const colorCode = inputColor != undefined ? (colorMap[inputColor.toLowerCase()] || inputColor) : '';
    return colorCode;
  }

  return (
    <div style={styles.overflowStyle}> 
      <table className="modal-table table-scroll">
            <thead>
              <tr>
                    {tableHeaderData != null ? tableHeaderData.map((item, index) => (
                      <th key={index} className="text-center">{item.qFallbackTitle}</th>
                )) : <></>}
              </tr>
            </thead>
            <tbody>
            {tableData != null ? tableData.map((row, rowIndex) => (
                    <tr key={rowIndex}>
                      {row.map((cell, cellIndex) => (
                        <td key={cellIndex}>
                           <span style={{
                              color : cell.qAttrExps != null ? mapColorCode(cell.qAttrExps.qValues[0].qText) : "" ,
              
                            }}>{cell.qText}</span>
                        </td>
                      ))}
                    </tr>
              )) : <></>}
            </tbody>
          </table>
    </div>
   
  );
}

export default ModalTable;
