    const drawHorizontalBarChartwithVal = () => {
        if (data.length === 0) return;

        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove();
        const margin = { top: -10, right: 10, bottom: 0, left: 0 };
        const width = svg.node().parentNode.clientWidth;
        const height = data.length * 50 
       
        svg
            .attr("width", width)
            .attr("height", height)
        

        const xScale = d3.scaleLinear()
            .domain([0, d3.max(data, (d) => d.value)])
            .range([0, width]);

        // Y ekseninin scale'ini name'e göre ayarlıyoruz
        const yScale = d3.scaleBand()
            .domain(data.map((d) => d.name))  // Y ekseni domain'ini 'name' üzerinden ayarlıyoruz
            .range([margin.top, height - margin.bottom])
            .padding(0.5);

        // Grafik alanını oluşturma
        const g = svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // X ekseni
        g.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(xScale).ticks(0))
            .selectAll(".domain")  // X ekseninin çizgileri
            .attr("stroke", "white")
            .attr("stroke-width", 2);

        // Y ekseninin çizgisini gizlemek için beyaz yapıyoruz
        g.selectAll(".y-axis .domain")
            .attr("stroke", "white")  // Y ekseninin çizgilerini beyaz yapıyoruz

        // Bar çubuklarını ve değerleri çiziyoruz
        const bars = g.selectAll(".bar")
            .data(data);

        const tooltip = d3
            .select('body')
            .append('div')
            .style('position', 'absolute')
            .style('background', 'rgba(0, 0, 0, 0.7)')
            .style('color', '#fff')
            .style('padding', '5px 10px')
            .style('border-radius', '5px')
            .style('font-size', '12px')
            .style('pointer-events', 'none')
            .style('display', 'none');

        bars.enter()
            .append("rect")
            .attr("class", "bar")
            .attr("x", 0)
            .attr("y", (d) => yScale(d.name) + 5) // Y konumunu name'e göre ayarlıyoruz
            .attr("width", (d) => xScale(d.value)/1.20) // X ekseni boyunca barın genişliği
            .attr("height", yScale.bandwidth() / 1.5) // Y eksenindeki her barın yüksekliği
            .attr("fill", (d) => {
                // Burada d.region veya d.branch gibi bir veri kontrolü yapabilirsiniz
                if (regionData === d.name.split('(')[0]?.trim()) {                 
                    if (graphicName === "Sube"){
                        return "#2b85c9"; // ilk çubuk yeşil
                    }else{
                        return "#7da246"; // ilk çubuk yeşil
                    }
                }
                else {
                    if (graphicName === "Bolge") {
                        return "#2b85c9"; // Bölgeye mavi renk                       
                    } else if (graphicName === "Sube") {
                        return "#7da246"; // Şubeye yeşil renk
                    } else {
                        return "#ddd";
                    }
                }

            }).on('mouseover', (event, d) => {
                tooltip
                    .style('display', 'block')
                    .html(d ? `<strong>${d.name}</strong>`: ``)
                    .style('left', `${event.pageX + 10}px`)
                    .style('top', `${event.pageY - 20}px`);
            })
            .on('mousemove', (event) => {
                tooltip
                    .style('left', `${event.pageX + 10}px`)
                    .style('top', `${event.pageY - 20}px`);
            })
            .on('mouseout', () => {
                tooltip.style('display', 'none');
            });

        // Her barın sağındaki değerleri yazıyoruz
        bars.enter()
            .append("text")
            .attr("class", "value")
            //  .attr("x", (d) => xScale(d.value) / 1.20 + 5) // Çubuğun sağında değer
            .attr("x", (d) => {
                
                const tempText = d3.select('svg').append('text')
                .style('visibility', 'hidden') // Geçici olduğundan görünmez yapıyoruz
                .text(d.name); 
              
                const textWidth = tempText.node().getBBox().width; // Gerçek metin genişliğini alıyoruz
                tempText.remove(); // Geçici metni siliyoruz           
                const barWidth = xScale(d.value) / 1.20;
                const realTextWidth = (textWidth / 1.5) + 10;
                const totalWidth = barWidth + realTextWidth;
                // console.log("barwidt : " + barWidth)
                // console.log("textWidth : " + barWidth)
                if(d.name == "İST AVRUPA 2( 7,509 M )" || d.name == "İST AVRUPA 1( 8,117 M )" || d.name == "GÜNEYDOĞU AND( 1,627.0 )")  {
                    console.log("burda")

                    console.log("d.name.length : " + d.name.length)
                    console.log("barwidth : " + barWidth)
                    console.log("textWidth : " + textWidth)
                    console.log(realTextWidth)
                 
                }
                if(totalWidth > width && realTextWidth < barWidth){                
                    // return barWidth - realTextWidth;
                    return barWidth - (d.name.length * 5.5);
                }
                else{
                    return barWidth  + 5;
                }
            }) 
            .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 1.75) // Y eksenindeki her barın ortasında
            .attr("dy", ".35em")
            .style("fill", (d) => {
                const tempText = d3.select('svg').append('text')
                .style('visibility', 'hidden') // Geçici olduğundan görünmez yapıyoruz
                .text(d.name); 
        
                const textWidth = tempText.node().getBBox().width; // Gerçek metin genişliğini alıyoruz
                tempText.remove(); // Geçici metni siliyoruz
             
                const realTextWidth = (textWidth / 1.5) + 10;
                const barWidth = xScale(d.value) / 1.20;
                const totalWidth = barWidth + realTextWidth;
 
                return (totalWidth > width &&  realTextWidth < barWidth) ? "white" : "#6a6a6a";
            })
            .text((d) => d.name);

        // Y eksenindeki metinleri value olarak değiştiriyoruz
        g.selectAll(".y-axis text")
            .text((d) => {
                // Y eksenindeki metni 'value' olarak değiştirmek
                const matchingData = data.find(item => item.name === d); // 'name' ile eşleşen veriyi bul
                return matchingData ? `${matchingData.value}` : `${d}`; // Eğer varsa, value'yu döndür, yoksa d'yi döndür
            });
    }
