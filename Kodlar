 const drawHorizontalBarChart = () => {
    
    if (!barData || barData.length === 0 || barData.some(item => isNaN(item.value) || item.value === "-" || item.name === "-")) return;

    const marginLeft = barData.length > 2 ? 140 : 110;
    //const marginLeft = 150;
    const margin = { top: 20, right: 60, bottom: 20, left: marginLeft };
    // const innerWidth = width.current - margin.left - margin.right;
    // const innerHeight = height.current - margin.top - margin.bottom;
    const innerWidth = windowSize.width - margin.left - margin.right;
    const innerHeight = windowSize.height - margin.top - margin.bottom;
    // En büyük değeri bul (eğer tüm değerler 100'den küçükse, 100'ü baz al)
    const maxValue = Math.max(100, d3.max(barData, d => d.value));

    const xScale = d3.scaleLinear()
      .domain([0, maxValue])
      .range([0, innerWidth]);

    const yScale = d3.scaleBand()
      .domain(barData.map(d => d.name))
      .range([0, innerHeight])
      .padding(0.2);

    const svg = d3.select(svgRef.current)
      .attr("width", "100%")
      .attr("height", "100%")
      .attr("viewBox", `0 0 ${windowSize.width} ${windowSize.height}`)
      .attr("preserveAspectRatio", "xMidYMid meet");

    svg.selectAll("*").remove();

    const g = svg.append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    g.selectAll(".background-bar")
      .data(barData)
      .enter()
      .append("rect")
      .attr("class", "background-bar")
      .attr("x", 0)
      .attr("y", d => yScale(d.name))
      .attr("width", xScale(maxValue)) // Sabit genişlikte arkaplan
      .attr("height", yScale.bandwidth() / 3)
      .attr("fill", "lightgray")
      .attr("rx", 12)
      .attr("ry", 12)
      .on("click", (event, d) => {
        handleBarPointClick(d.name,filterArr);
        setTimeout(() => {
          onBarPointClick();
        }, 125);
      });

    g.selectAll(".value-bar")
      .data(barData)
      .enter()
      .append("rect")
      .attr("class", "value-bar")
      .attr("x", 0)
      .attr("y", d => yScale(d.name))
      .attr("width", d => xScale(d.value)) // Normalleştirilmiş genişlik
      .attr("height", yScale.bandwidth() / 3)
      .attr("fill", graphColor)
      .attr("rx", 12)
      .attr("ry", 12)
      .on("click", (event, d) => {
        handleBarClick(d.name, filterArr);
        setTimeout(() => {
          onBarPointClick();
        }, 125);
        
      });

    g.selectAll("text")
      .data(barData)
      .enter()
      .append("text")
      .attr("x", d => xScale(maxValue) + 15)
      .attr("y", (d, i) => {    
        return yScale(d.name) + yScale.bandwidth() /  5
      }) // Çubuk sayısına göre kaydırma      
      .attr("alignment-baseline", "middle")
      .text(d => type === 'percentage' ? `${d != undefined ? d.value.toFixed(0): ''}%` : `${d != undefined ? d.value.toFixed(0): ''}`)
      .attr("font-size" ,13)

    const yAxis = d3.axisLeft(yScale).tickSize(0);
    g.append("g")
      .call(yAxis)
      .selectAll("text")
      .attr("transform", "translate(-5," + (barData.length === 1 ? -55 : barData.length === 2 ? -30 : barData.length === 3 ? -20 : barData.length === 4 ? -15 : -10) + ")") // Y-axis kaydırma
      .style('text-anchor', 'end')
      .text(d => d.length > 25 ? d.slice(0, 20) + "..." : d);

    g.select(".domain").remove();
  }
