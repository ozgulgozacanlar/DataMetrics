const renderRow = (item, parentId = '', level = 0) => {
  const isExpanded = expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`);

  return (
    <React.Fragment key={item.id}>
      <tr className={level === 0 ? 'parent-row' : 'child-row'}>
        <td style={{ paddingLeft: `${level * 26}px` }} onClick={() => toggleRow(item.id, parentId)}>
          <div className="first-column">
            {item.children.length > 0 && (
              <button
                className={`rounded-button ${isExpanded ? 'down' : 'up'}`}
                type="button"
                onClick={(e) => {
                  e.stopPropagation();
                  toggleRow(item.id, parentId);
                }}
              >
              </button>
            )}
            <span className="ellipsis">{item.name.replace(/^[\s•⸰]+/, '')}</span>
          </div>
        </td>
        {item.data.map((value, index) => (
          index === 1 && lineStatus
            ? (
              <td key={index}>
                <div
                  className="line-chart-area"
                  onClick={() => handleRowClick(item)}
                  onMouseEnter={() => console.log('Hovered on the line-chart-area')}
                  style={{
                    cursor: 'pointer',
                    textAlign: 'center',
                  }}
                >
                  <ResponsiveLineChart app={app} objectId={lineGraphId} item={item} lineWidth={395} lineHeight={100} />
                </div>
              </td>
            ) : (
              <td key={index}>{value}</td>
            )
        ))}
      </tr>
      {item.children.length > 0 && (
        <tr className={`child-row ${isExpanded ? 'expanded' : ''}`}>
          <td colSpan={tableHeaderData.length} style={{ padding: 0 }}>
            {item.children.map((child) => renderRow(child, `${parentId ? parentId + '-' : ''}${item.id}`, level + 1))}
          </td>
        </tr>
      )}
    </React.Fragment>
  );
};
/* Satırların çocuklarının animasyonlu açılışı */
.child-row {
  transform: translateY(-10px);
  opacity: 0;
  transition: transform 0.3s ease, opacity 0.3s ease; /* Açılış/Kapanış animasyonu */
}

.child-row.expanded {
  transform: translateY(0);
  opacity: 1;
}
