import { useEffect, useRef , useState } from 'react';
import * as d3 from 'd3';
import { getObjectData, getObjectModel } from '@/util/qlikConnection';
import { formatBarChartNumber } from '@/util/helper';

export default function MultiBarChart({ app, objectId, titleStatus, onLoaded, isVisible ,graphicName="" }) {
  const svgRef = useRef(null);
  const chartContainerRef = useRef(null);
  const [data, setData] = useState([]);
  const [legendData, setLegendData] = useState([]);
  const [chartTitle, setChartTitle] = useState("");
  const [svgSize, setSvgSize] = useState({ width: 0, height: 0 });

  useEffect(() => {
    function renderBarChartQlikObject(objectId) {
      if (app) {
        getObjectData(app, objectId).then((response) => {
          if (!response) {
            console.error('MultiBarChart Component : response verisi boş veya tanımsız.');
            return; 
          }
          setData(response);
          setTimeout(() => { onLoaded(); }, 250);
        }).catch((error) => {
          console.error('MultiBarChart Component : getObjectData() methodu veri alınırken hata oluştu:', error);
        });

        getObjectModel(app, objectId).then((model) => {
          if (!model) {
            console.error('MultiBarChart Component : model verisi boş veya tanımsız.');
            return; 
          }
          const legendDataArray = model.layout.qHyperCube.qMeasureInfo.map(
            (item) => item.qFallbackTitle
          );
          if(graphicName !== 'hacimselGelisim'){ //Hacimsel gelişim sayfasındaki bar-chart grafiğinde legend yok.
            setLegendData(legendDataArray);
          }
         
          setChartTitle(model.layout.title);
        }).catch((error) => {
          console.error('MultiBarChart Component : getObjectModel() methodu veri alınırken hata oluştu:', error);
        });
      }
    }
    renderBarChartQlikObject(objectId);
  }, [app, objectId, onLoaded]);

  const updateDimensions = () => {
    if (chartContainerRef.current) {
      setSvgSize({
        width: chartContainerRef.current.offsetWidth,
        height: chartContainerRef.current.offsetHeight,
      });
    }
  };

  useEffect(() => {
    updateDimensions();
    window.addEventListener("resize", updateDimensions);

    return () => {
      window.removeEventListener("resize", updateDimensions);
    };
  }, [isVisible]);

  const drawBarChart = () => {
    if (data.length === 0 && legendData.length === 0) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove();

    let margin = { top: 20, right: 30, bottom: 50, left: 30 };
    if(graphicName === 'hacimselGelisim'){
      margin = { top: 20, right: 30, bottom: 20, left: 0 };
    }
   
    const width = svgSize.width - margin.left - margin.right;
    const height = svgSize.height - margin.top - margin.bottom;

    svg
      .attr("width", svgSize.width)
      .attr("height", svgSize.height)
      .attr("viewBox", `0 0 ${svgSize.width} ${svgSize.height}`)
      .attr("preserveAspectRatio", "xMidYMid meet");

    const x0 = d3.scaleBand().rangeRound([0, width]).padding(0.4);
    const x1 = d3.scaleBand().padding(0.3);
    const y = d3.scaleLinear().rangeRound([height, 0]);

    const categories = data.map((d) => d[0].qText);
    const series = data[0].slice(1).map((_, i) => i);

    const maxYValue = d3.max(data, (d) => d3.max(d.slice(1), (e) => e.qNum));

    x0.domain(categories);
    x1.domain(series).rangeRound([0, x0.bandwidth()]);
    y.domain([0, maxYValue]);

    const chartGroup = svg
      .append("g")
      .attr("transform", `translate(${margin.left}, ${margin.top})`);

    const xAxis = chartGroup
      .append("g")
      .attr("class", "x-axis")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x0));

    xAxis.selectAll("line").remove();
    xAxis.selectAll(".domain").remove();
    const yAxis = chartGroup
    .append("g")
    .attr("class", "y-axis")

    if(graphicName === 'hacimselGelisim'){ // Bu grafikte y ekseni text ve çizgileri yok.
      yAxis.call(d3.axisLeft(y).ticks(1));   
      yAxis
      .selectAll(".tick text")
      .style("visibility", "hidden");  
    }
    else{
      yAxis.call(d3.axisLeft(y).ticks(5)); 
    }
    yAxis.selectAll("path").remove();
    yAxis
      .selectAll(".tick line")
      .attr("x2", width)
      .attr("stroke", "gray")
      .attr("stroke-opacity", 0.3);

    const barsGroup = chartGroup
      .append("g")
      .selectAll("g")
      .data(data)
      .enter()
      .append("g")
      .attr("transform", (d, i) => `translate(${x0(categories[i])}, 0)`);

    let barCounter = 0; 

    barsGroup
      .selectAll("rect")
      .data((d) => d.slice(1))
      .enter()
      .append("rect")
      .attr("x", (_, i) => x1(i))
      .attr("y", (d) => y(d.qNum))
      .attr("width", x1.bandwidth())
      .attr("height", (d) => height - y(d.qNum))
      //.attr("fill", (_, i) => (i % 2 === 0 ? "#2c84cc" : "#a4c48c"));
      .attr("fill", (_, i) => {
      let color = i % 2 === 0 ? "#2c84cc" : "#a4c48c";  //  renkler (Mavi ve Yeşil)
      // Global sayaç ile her barı sırasıyla renkli yapıyoruz
      if(graphicName === 'hacimselGelisim'){ //Hacimsel gelişim sayfasındaki bar-chart grafiğinde çubuklar bir mavi bir yeşil olacak şekilde ayarlandı.
        color = barCounter % 2 === 0 ? "#2c84cc" : "#a4c48c"; 
        barCounter++;       
      }    
      return color;  
    });
    barsGroup
      .selectAll("text")
      .data((d) => d.slice(1))
      .enter()
      .append("text")
      .attr("x", (_, i) => x1(i) + x1.bandwidth() / 2)
      .attr("y", (d) => y(d.qNum) - 5)
      .attr("text-anchor", "middle")
      .text((d) => formatBarChartNumber(d.qNum))
      .style("fill", "#6a6a6a")
      .style("font-size", "12px")
      .style("font-weight", "bold");

    const legendContainer = chartGroup
      .append("g")
      .attr("transform", `translate(${width / 2 - 80}, ${height + 30})`);

    const legendItems = legendContainer
      .selectAll(".legend-item")
      .data(legendData)
      .enter()
      .append("g")
      .attr("class", "legend-item")
      .attr("transform", (_, i) => `translate(${i * 80}, 0)`);

    legendItems
      .append("rect")
      .attr("width", 15)
      .attr("height", 15)
      .attr("rx", 10)
      .attr("ry", 10)
      .attr("fill", (_, i) => (i % 2 === 0 ? "#2c84cc" : "#a4c48c"));

    legendItems
      .append("text")
      .attr("x", 22)
      .attr("y", 12)
      .text((d) => d)
      .style("fill", "#6a6a6a")
      .style("font-size", "12px");
  };

  useEffect(() => {
    if (data.length > 0 && svgSize.width > 0 && svgSize.height > 0) {
      drawBarChart();
    }
  }, [data, svgSize, legendData]);

  return (
    <>
      {titleStatus != false? <div className="card-title">{chartTitle}</div> : <></> }
      <div ref={chartContainerRef} style={{ width: "100%", height: "300px" }}>
        <svg ref={svgRef} style={{ width: "100%", height: "100%" }}></svg>
      </div>
    </>
  );
}
