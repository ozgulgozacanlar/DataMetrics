 const drawHorizontalBarChart = () => {
        if (data.length === 0) return;

        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove();

        const margin = { top: 0, right: 20, bottom: 20, left: 35 };
        const width = svg.node().getBoundingClientRect().width - margin.left - margin.right;
        const height = 1000;

        svg
            .attr("width", width)
            .attr("height", height);

        const xScale = d3.scaleLinear()
            .domain([0, d3.max(data, (d) => d.value)])
            .range([0, width - margin.left - margin.right]);

        // Y ekseninin scale'ini name'e göre ayarlıyoruz
        const yScale = d3.scaleBand()
            .domain(data.map((d) => d.name))  // Y ekseni domain'ini 'name' üzerinden ayarlıyoruz
            .range([margin.top, height - margin.bottom])
            .padding(0.5);

        // Grafik alanını oluşturma
        const g = svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // X ekseni
        g.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(xScale).ticks(0))
            .selectAll(".domain")  // X ekseninin çizgileri
            .attr("stroke", "white")
            .attr("stroke-width", 2);

        // Y ekseni
        g.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(yScale).ticks(0)) // ticks(0) ile tick'leri kaldor
            .selectAll(".tick line") // Y eksenindeki tick çizgileri
            .remove(); // Tick çizgilerini siler.

        // Y ekseninin çizgisini gizlemek için beyaz yapıyoruz
        g.selectAll(".y-axis .domain")
            .attr("stroke", "white")  // Y ekseninin çizgilerini beyaz yapıyoruz


        const yAxisPosition = 0; // Y ekseninin başlangıç noktası

        // Y eksenine paralel bir path ( y eksenindeki tick sorununu çözmek için bu şekilde bir yöntem uygulandı.)
        g.append("path")
            .attr("class", "y-axis-path")
            .attr("d", `M${yAxisPosition},${margin.top} V${height - margin.bottom}`) // Y ekseninin başlangıç noktasından bitiş noktasına kadar dikey çizgi çizecek
            .attr("stroke", "#666666")
            .attr("stroke-width", 0.5); 

        // Bar çubuklarını ve değerleri çiziyoruz
        const bars = g.selectAll(".bar")
            .data(data);

        bars.enter()
            .append("rect")
            .attr("class", "bar")
            .attr("x", 0) 
            .attr("y", (d) => yScale(d.name)) // Y konumunu name'e göre ayarlıyoruz
            .attr("width", (d) => xScale(d.value)) // X ekseni boyunca barın genişliği
            .attr("height", yScale.bandwidth()) // Y eksenindeki her barın yüksekliği
            .attr("fill", (d) => {
                // Burada d.region veya d.branch gibi bir veri kontrolü yapabilirsiniz
                if (graphicName === "Bolge") {
                    return "#2b85c9"; // Bölgeye mavi renk
                } else if (graphicName === "Sube") {
                    return "#a1c789"; // Şubeye yeşil renk
                }
                return "#2b85c9"; // Varsayılan renk
            });

        // Her barın sağındaki değerleri yazıyoruz
        bars.enter()
            .append("text")
            .attr("class", "value")
            .attr("x", (d) => xScale(d.value) + 5) // Çubuğun sağında değer
            .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 2.5) // Y eksenindeki her barın ortasında
            .attr("dy", ".35em")
            .text((d) => d.name); // Değerlerin gösterimi

        // Y eksenindeki metinleri value olarak değiştiriyoruz
        g.selectAll(".y-axis text")
            .text((d) => {
                // Y eksenindeki metni 'value' olarak değiştirmek
                const matchingData = data.find(item => item.name === d); // 'name' ile eşleşen veriyi bul
                return matchingData ?  `${matchingData.value}%` : `${d}%`; // Eğer varsa, value'yu döndür, yoksa d'yi döndür
            });

        // X ekseninin üzerine sabit uzunlukta bir path çizgisi ekliyoruz
        const xAxisPosition = height - margin.bottom; // X ekseninin tam üstüne çizgi eklemek için konum
        const fixedXAxisWidth = width; // Sabit X ekseni uzunluğu

        g.append("path")
            .attr("class", "x-axis-line")
            .attr("d", `M0,${xAxisPosition} H${fixedXAxisWidth}`) // Sabit bir uzunlukta yatay x ekseni çizgisi çizer
            .attr("stroke", "#666666")
            .attr("stroke-width", 0.5); 
    }
