import { useEffect, useState } from 'react';
import { getObjectData } from '@/util/qlikConnection';

export default function TableWithProgressBar({app, objectId, filterChange}) {

    const [tableHeaderData, setTableHeaderData] = useState(null);
    const [tableDataArray, setTableDataArray] = useState(null);
  
  
    const renderQlikTableObject = (objectId) => {
      if (app) {
        getObjectData(app, objectId).then((response) => {
            console.log(response)
          if (!response) {
            console.error('TableChart Component : response verisi boş veya tanımsız.');
            return;
          }
            const tableDatas = response.map(item => {         
            return item.slice(0,4).map(innerItem => innerItem.qText); 
          });
          console.log(tableDatas)
          setTableDataArray(tableDatas);
  
        }).catch((error) => {
          console.error('TableChart Component : getObjectData() methodu veri alınırken hata oluştu:', error);
        });
        //Tablo header bilgileri alınıyor
        app.getObject(objectId).then((model) => { 
          if (!model) {
            console.error('TableChart Component : model verisi boş veya tanımsız.');
            return;
          }
          console.log( model.layout.qHyperCube)
          // `qDimensionInfo` ve `qMeasureInfo` öğelerinin `qFallbackTitle` değerlerini alıp birleştiriyoruz.
          const dimensionTitles = model.layout.qHyperCube.qDimensionInfo.slice(0,4).map(item => item.qFallbackTitle);
          const measureTitles = model.layout.qHyperCube.qMeasureInfo.map(item => item.qFallbackTitle);
  
          // `qDimensionInfo` öğelerini ilk sıraya, `qMeasureInfo` öğelerini sonra ekliyoruz.
          let combinedTitles = [...dimensionTitles, ...measureTitles];
          console.log(combinedTitles)

          setTableHeaderData(combinedTitles);
  
        }).catch((error) => {
          console.error('TableChart Component : getObject() methodu veri alınırken hata oluştu:', error);
        });
      } else {
        // console.error('Qlik Sense app is not loaded yet');
      }
    }
    useEffect(() => {  
      renderQlikTableObject(objectId);
    }, [app, objectId,filterChange]);
  
    return (
        <table className="detail-table">
            <thead>
                <tr>
                    {tableHeaderData && tableHeaderData.map((header, index) => (
                        <th scope="col" key={index}>
                            {header}
                        </th>
                    ))}
                </tr>
            </thead>
            <tbody>
                {tableDataArray && tableDataArray.map((row, index) => (
                    <tr key={index}>
                        {row.slice(0, -1).map((cell, cellIndex) => (
                            <td key={cellIndex}>{cell}</td> // Son eleman hariç tüm elemanları sırayla yerleştiriyoruz
                        ))}
                        <td>
                            <div className="d-flex align-items-center flex-grow-1 gap-3">
                                <div className="horizontal-progressbar-wrapper">
                                    <div className="bar" style={{ width: `${row[row.length - 1]}%` }}>&nbsp;</div> {/* Son elemanla yüzde hesaplaması */}
                                </div>
                                <span className="value">{`${row[row.length - 1]}`}</span> {/* Son eleman, örneğin %95,7 */}
                            </div>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
  )
}
