   const deneme = (array) =>{

    const { qLeft, qData } = array;
    const result = [];
    let currentParent = null;
    
    qLeft.forEach((leftItem, index) => {
      // Yeni bir item oluşturuyoruz
      const dataItem = {
        name: leftItem.qSubNodes[0]?.qText || leftItem.qText, // qText ya da qSubNodes'dan gelen değeri kullanıyoruz
        data: [ leftItem.qText, ...qData[index].map(val => (val.qText ))], // qText'i { qText: value } formatında ekliyoruz
        children: []
      };
    
      // Eğer mevcut item'ın qSubNodes'unda "•" varsa, bunları children'a ekliyoruz
      leftItem.qSubNodes.forEach(subNode => {
        const trimmedText = subNode.qText.trim(); // Başındaki boşlukları temizliyoruz
        if (trimmedText.startsWith("•") || trimmedText.startsWith("⸰")) {
          const childItem = {
            name: subNode.qText,
            data: [ leftItem.qText , ...qData[index].map(val => ( val.qText ))], // qText'i { qText: value } formatında ekliyoruz
            children: []
          };
    
          dataItem.children.push(childItem); // Bu itemı children'a ekliyoruz
        }
      });
     
      // Eğer "•" işaretli değilse, doğrudan ekliyoruz
      if (dataItem.name.trim().startsWith("•") || dataItem.name.trim().startsWith("⸰")) {
        if (currentParent) {
          currentParent.children.push(dataItem);
        }
      } else {
        result.push(dataItem); // İlk öğe doğrudan ekleniyor
        currentParent = dataItem; // Bu öğe şu anda parent oldu
      }
    });
    
    console.log(result);
  
    }
