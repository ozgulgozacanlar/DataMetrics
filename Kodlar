import React, { useEffect, useState } from 'react';
import { getObjectData, getObjectPivotTableData } from '@/util/qlikConnection';

export default function TableComponent({ app, objectId }) {
  function renderTable() {
    if (app) {
      getObjectPivotTableData(app, objectId).then((response) => {
        console.log(response);
      });
    }
  }

  useEffect(() => {
    renderTable();
  }, [app, objectId]);

  const data = [
    {
      id: 1,
      name: 'DataOps',
      data: [1.23, 4.56, 7.89, 0.12, 3.45, 6.78, 9.01],
      children: [
        {
          name: 'DQ Skoru',
          data: [1.11, 2.22, 3.33, 4.44, 5.55, 6.66, 7.77],
          children: [
            {
              name: 'DQ Technical',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
            {
              name: 'Last Check',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
          ],
        },
        {
          name: 'Veri Envanteri Skoru',
          data: [8.45, 6.78, 9.01, 2.34, 5.67, 8.90, 1.23],
          children: [
            {
              name: 'Errors',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
            {
              name: 'Errors 1',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
            {
              name: 'Errors 2',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
          ],
        },
        {
          name: 'DENEME',
          data: [8.45, 6.78, 9.01, 2.34, 5.67, 8.90, 1.23],
          children: [],
        },
      ],
    },
    {
      id: 2,
      name: 'METADATA HUB',
      data: [2.34, 5.67, 8.90, 1.23, 4.56, 7.89, 0.12],
      children: [
        {
          name: 'Aylık Toplam Search Adedi',
          data: [3.45, 6.78, 9.01, 2.34, 5.67, 8.90, 1.23],
          children: [
            {
              name: 'Search 1',
              data: [0.98, 1.23, 3.45, 5.67, 7.89, 0.12, 4.56],
              children: [],
            },
          ],
        },
        {
          name: 'Aylık Toplam Lineage',
          data: [3.45, 2.67, 9.01, 4.6, 8.67, 8.90, 8.21],
          children: [],
        },
      ],
    },
  ];

  const [expandedRows, setExpandedRows] = useState([]);

  // Satır açma/kapama işlevi
  const toggleRow = (id, parentId = '') => {
    const key = parentId ? `${parentId}-${id}` : `${id}`;
    setExpandedRows((prevState) =>
      prevState.includes(key)
        ? prevState.filter((rowId) => rowId !== key)
        : [...prevState, key]
    );
  };

  // Satır render fonksiyonu
  const renderRow = (item, parentId = '') => (
    <React.Fragment key={item.id}>
      <tr key={item.id}>
        <td>
          {item.children.length > 0 && (
            <button
              className="btn btn-info btn-sm ms-2"
              type="button"
              onClick={() => toggleRow(item.id, parentId)}
            >
              {expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) ? '-' : '+'}
            </button>
          )}
          {item.name}
        </td>
        {item.data.map((value, index) => (
          <td key={index}>{value}</td>
        ))}
      </tr>
      {item.children.length > 0 &&
        expandedRows.includes(`${parentId ? parentId + '-' : ''}${item.id}`) &&
        item.children.map((child, index) =>
          renderRow(child, `${parentId}-${item.id}-${index}`)
        )}
    </React.Fragment>
  );

  // Yeni effect ekleyerek tüm satırları ilk açılışta açıyoruz
  useEffect(() => {
    const allRowKeys = [];

    // Tüm ana veriler için key'leri alıyoruz
    const collectKeys = (items, parentKey = '') => {
      items.forEach((item) => {
        const currentKey = parentKey ? `${parentKey}-${item.id}` : `${item.id}`;
        allRowKeys.push(currentKey);
        if (item.children.length > 0) {
          collectKeys(item.children, currentKey); // Alt öğeler için aynı işlemi tekrar ediyoruz
        }
      });
    };

    collectKeys(data); // Ana data üzerinden key'leri alıyoruz
    setExpandedRows(allRowKeys); // İlk açılışta tüm satırları açıyoruz
  }, [data]); // Data değiştikçe bu effect tetiklenir

  return (
    <div className="container mt-5">
      <div className="col-md-12">
        <div className="panel panel-default">
          <div className="panel-heading">Datametrics Table</div>
          <div className="panel-body">
            <table className="table table-condensed table-striped">
              <thead>
                <tr>
                  <th></th>
                  <th></th>
                  <th>Son 6 Ay Trend</th>
                  <th>2023 Aralık</th>
                  <th>2024 Ağustos</th>
                  <th>2024 Eylül</th>
                  <th>2024 Ekim</th>
                  <th>2024 Kasım</th>
                </tr>
              </thead>
              <tbody>{data.map((item) => renderRow(item))}</tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
