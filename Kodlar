 <ul className="sidemenu ps-0">
                {filteredItems.map((item, i) => (
                  <MenuItem data={item} key={i} isSideMenuClosed={isMenuClosed} searchTerm={searchTerm} activeMenuId={activeMenuId} setActiveMenuId={setActiveMenuId}/>
                ))}
              </ul>

const [activeMenuId, setActiveMenuId] = useState(null);

  function handleClick() {
    dispatch(setMenu(!isMenuClosed));
    dispatch(pinMenu(!isMenuPinned));
  }
  function handleClickGoHome() {
    navigate("/");
  }
  useEffect(() => {
    const fetchMenuContext = async () => {
      while (true) {
        if (menuContext.length > 0) {
          setMenuItems(menuContext);
          setFilteredItems(menuContext); // Başlangıçta filtrelenmiş öğeleri ayarla
          console.log(menuContext)
          break; // Exit the loop if the menuContext is not empty
        }

        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      setLoading(false);
    };
    fetchMenuContext();
  }, []);


 useEffect(() => { //Arama ile bulunan kelimeler alt menüde ise ilgili menülerin açılması için bu değişken tutuldu.
   setIsOpen(data.isOpen)
   console.log(activeMenuId)
  }, [data]);
