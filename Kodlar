
  const drawBarChart2 = () => {

    if (data.length === 0) return;

    const svg = d3.select(svgRef.current)
    svg.selectAll('*').remove();

    // .attr('width', 600)
    // .attr('height', 400);
  
  const margin = { top: 20, right: 30, bottom: 40, left: 40 };
  const width = svg.node().getBoundingClientRect().width - margin.left - margin.right;
  const height = svg.node().getBoundingClientRect().height - margin.top - margin.bottom;
 console.log(height)
  svg
  .attr("width", width)
  .attr("height", height);
  
  const x0 = d3.scaleBand().rangeRound([0, width]).padding(0.1);
  const x1 = d3.scaleBand().padding(0.05);
  const y = d3.scaleLinear().rangeRound([height, 0]);
  
  console.log(data)
  const categories = data.map(d => d[0].qText);
  const series = data[0].slice(1).map((d, i) => i);
  
  // Set domains
  x0.domain(categories);
  x1.domain(series).rangeRound([0, x0.bandwidth()]);
  y.domain([0, d3.max(data, d => d3.max(d.slice(1), e => e.qNum))]);
  
  svg.append('g')
    .selectAll('g')
    .data(data)
    .enter().append('g')
    .attr('transform', (d, i) => `translate(${x0(categories[i])}, 0)`)
    .selectAll('rect')
    .data(d => d.slice(1))
    .enter().append('rect')
    .attr('x', (d, i) => x1(i))
    .attr('y', d => y(d.qNum))
    .attr('width', x1.bandwidth())
    .attr('height', d => height - y(d.qNum))
    .attr('fill', (d, i) => i % 2 === 0 ? 'steelblue' : 'orange');
  
  svg.append('g')
    .attr('class', 'x-axis')
    .attr('transform', `translate(0,${height})`)
    .call(d3.axisBottom(x0));
  
  svg.append('g')
    .attr('class', 'y-axis')
    .call(d3.axisLeft(y));
  }
 
  useEffect(() => {
    //drawBarChart();
    //drawBarChart(dataBarchart,600,600);
    if(data.length >0){
      drawBarChart2();
    }
  
  }, [data]);

  return (
    // <svg ref={svgRef}></svg>  
    <div style={{ width: "100%", height: "300px" }}>
        <svg ref={svgRef} style={{ width: "100%" }}></svg>
    </div>
    
);
};
