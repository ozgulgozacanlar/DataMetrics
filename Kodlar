import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

const data = [
  [
    { "qText": "Üye İşyeri Stok Aktivasyon", "qNum": "NaN", "qElemNumber": 0, "qState": "O" },
    { "qText": "76", "qNum": 75.83, "qElemNumber": 0, "qState": "L" },
    { "qText": "78", "qNum": 77.87, "qElemNumber": 0, "qState": "L" }
  ],
  [
    { "qText": "Ticari Kart Verimlilik", "qNum": "NaN", "qElemNumber": 1, "qState": "O" },
    { "qText": "44", "qNum": 43.5, "qElemNumber": 0, "qState": "L" },
    { "qText": "44", "qNum": 44.37, "qElemNumber": 0, "qState": "L" }
  ],
  [
    { "qText": "Bireysel Kart Verimlilik", "qNum": "NaN", "qElemNumber": 2, "qState": "O" },
    { "qText": "43", "qNum": 43.3, "qElemNumber": 0, "qState": "L" },
    { "qText": "42", "qNum": 41.51, "qElemNumber": 0, "qState": "L" }
  ],
  [
    { "qText": "Anında Kart Satış Payı", "qNum": "NaN", "qElemNumber": 3, "qState": "O" },
    { "qText": "78", "qNum": 77.69, "qElemNumber": 0, "qState": "L" },
    { "qText": "65", "qNum": 65.23, "qElemNumber": 0, "qState": "L" }
  ]
];

const MultiBarChart = () => {
  const svgRef = useRef(null);
  const chartContainerRef = useRef(null); // Div'e referans
  const [svgSize, setSvgSize] = useState({ width: 0, height: 400 });

  // Boyutları güncelleyen fonksiyon
  const updateDimensions = () => {
    if (chartContainerRef.current) {
      setSvgSize({
        width: chartContainerRef.current.offsetWidth,  // Div'in genişliği
        height: 400  // Sabit yükseklik ya da ihtiyaca göre ayarlanabilir
      });
    }
  };

  // Responsive tasarım için boyutları güncelleyen effect
  useEffect(() => {
    updateDimensions();  // İlk boyutlandırmayı yap
    window.addEventListener('resize', updateDimensions);  // Pencere boyutu değiştiğinde boyutları güncelle

    return () => {
      window.removeEventListener('resize', updateDimensions);  // Temizleme işlemi
    };
  }, []);

  useEffect(() => {
    if (svgSize.width === 0) return;  // Eğer genişlik sıfırsa, çizimi yapma

    // D3.js ile SVG oluşturma
    const svg = d3.select(svgRef.current)
      .attr('width', svgSize.width)
      .attr('height', svgSize.height);

    const margin = { top: 20, right: 30, bottom: 40, left: 40 };
    const width = svgSize.width - margin.left - margin.right;
    const height = svgSize.height - margin.top - margin.bottom;

    const x0 = d3.scaleBand().rangeRound([0, width]).padding(0.1);
    const x1 = d3.scaleBand().padding(0.05);
    const y = d3.scaleLinear().rangeRound([height, 0]);

    const categories = data.map(d => d[0].qText);
    const series = data[0].slice(1).map((d, i) => i);

    x0.domain(categories);
    x1.domain(series).rangeRound([0, x0.bandwidth()]);
    y.domain([0, d3.max(data, d => d3.max(d.slice(1), e => e.qNum))]);

    svg.selectAll('*').remove();  // SVG içeriğini temizle

    // Kategorilere göre gruplar ekle
    svg.append('g')
      .selectAll('g')
      .data(data)
      .enter().append('g')
      .attr('transform', (d, i) => `translate(${x0(categories[i])}, 0)`)
      .selectAll('rect')
      .data(d => d.slice(1))
      .enter().append('rect')
      .attr('x', (d, i) => x1(i))
      .attr('y', d => y(d.qNum))
      .attr('width', x1.bandwidth())
      .attr('height', d => height - y(d.qNum))
      .attr('fill', (d, i) => i % 2 === 0 ? 'steelblue' : 'orange');

    // X ekseni ekle
    svg.append('g')
      .attr('class', 'x-axis')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(x0));

    // Y ekseni ekle
    svg.append('g')
      .attr('class', 'y-axis')
      .call(d3.axisLeft(y));

  }, [svgSize]);  // Boyut değiştiğinde yeniden render et

  return (
    <div ref={chartContainerRef} style={{ width: '100%' }}>
      <svg ref={svgRef}></svg>
    </div>
  );
};

export default MultiBarChart;
