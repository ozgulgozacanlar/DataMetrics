   const drawHorizontalBarChartwithVal = () => {
        if (data.length === 0) return;

        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove();

        const margin = { top: 15, right: 20, bottom: 10, left: 120 };
        const width = svg.node().getBoundingClientRect().width - margin.left - margin.right;
        const height = data.length * 60 //Bar çubuk aralıkları 2 grafik içinde hemen hemen aynı olması için height'ları farklı veriliyor. 

        svg
            .attr("width", width)
            .attr("height", height);

        const xScale = d3.scaleLinear()
            .domain([0, d3.max(data, (d) => d.value)])
            .range([0, width - margin.left - margin.right]);

        // Y ekseninin scale'ini name'e göre ayarlıyoruz
        const yScale = d3.scaleBand()
            .domain(data.map((d) => d.name))  // Y ekseni domain'ini 'name' üzerinden ayarlıyoruz
            .range([margin.top, height - margin.bottom])
            .padding(0.5);

        // Grafik alanını oluşturma
        const g = svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // X ekseni
        g.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(xScale).ticks(0).tickSize(0))  // tickSize(0) ile çizgileri kaldırıyoruz
            .selectAll(".domain")  // X ekseninin çizgileri
            // .attr("stroke", "white")
            .attr("stroke-width", 1);

      
        

        g.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(yScale).ticks(0).tickSize(0))      // Y ekseni için scale uyguluyoruz
            .selectAll(".domain")  // X ekseninin çizgileri
            .attr("stroke-width", 1);

        // Bar çubuklarını ve değerleri çiziyoruz
        const bars = g.selectAll(".bar")
            .data(data);

        const tooltip = d3
            .select('body')
            .append('div')
            .style('position', 'absolute')
            .style('background', 'rgba(0, 0, 0, 0.7)')
            .style('color', '#fff')
            .style('padding', '5px 10px')
            .style('border-radius', '5px')
            .style('font-size', '12px')
            .style('pointer-events', 'none')
            .style('display', 'none');

        bars.enter()
            .append("rect")
            .attr("class", "bar")
            .attr("x", 0)
            .attr("y", (d) => yScale(d.name) + 5) // Y konumunu name'e göre ayarlıyoruz
            .attr("width", (d) => xScale(d.value) / 1.20) // X ekseni boyunca barın genişliği
            .attr("height", yScale.bandwidth() / 1.5) // Y eksenindeki her barın yüksekliği
            .attr("fill", () => {
                // Burada d.region veya d.branch gibi bir veri kontrolü yapabilirsiniz

                return "#2b85c9";

            }).on('mouseover', (event, d) => {
                tooltip
                    .style('display', 'block')
                    .html(d ? `<strong>${d.name}</strong>` : ``)
                    .style('left', `${event.pageX + 10}px`)
                    .style('top', `${event.pageY - 20}px`);
            })
            .on('mousemove', (event) => {
                tooltip
                    .style('left', `${event.pageX + 10}px`)
                    .style('top', `${event.pageY - 20}px`);
            })
            .on('mouseout', () => {
                tooltip.style('display', 'none');
            });

        // Her barın sağındaki değerleri yazıyoruz
        bars.enter()
            .append("text")
            .attr("class", "value")
            .attr("x", (d) => xScale(d.value) / 1.20 + 5) // Çubuğun sağında değer
            .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 1.75) // Y eksenindeki her barın ortasında
            .attr("dy", ".35em")
            .text((d) => d.valueText);

        // Y eksenindeki metinleri value olarak değiştiriyoruz
        g.selectAll(".y-axis text")
            .text((d) => {
                console.log(d)
                return d.length > 10 ? d.substring(0, 10) + '...' : d;            
            });
    }
    useEffect(() => {
        if (svgSize.width > 0 && svgSize.height > 0) {
            drawHorizontalBarChartwithVal();
        }
      }, [data, svgSize]);

    return (
        <div ref={chartContainerRef} style={{ width: '100%', height: "300px"  }}>
        <svg ref={svgRef} style={{ width: '100%' }}></svg>
      </div>
        
    );

barsGroup
  .selectAll("rect")
  .data((d) => d.slice(1))
  .enter()
  .append("rect")
  .attr("x", (_, i) => x1(i))
  .attr("y", (d) => y(d.qNum))
  .attr("width", x1.bandwidth())
  .attr("height", (d) => height - y(d.qNum))
  .attr("fill", (_, i) => {
    let color = i % 2 === 0 ? "#2c84cc" : "#a4c48c";  
    if(graphicName === 'hacimselGelisim'){ 
      color = barCounter % 2 === 0 ? "#2c84cc" : "#a4c48c"; 
      barCounter++;       
    }    
    return color;  
  })
  .on("click", (event, d) => {
    // Tıklanan çubuğun ismini al (örneğin qText veya başka bir alan)
    const clickedValue = d.qText; // Tıklanan barın değerini alıyoruz (d.qText veya başka bir uygun alan olabilir)

    // Qlik objesine filtre atmak
    if (app) {
      app.field("UnitName").selectValues([clickedValue], true); // "UnitName" alanında seçimi uygula
    }

    // (Opsiyonel) Tıklanan çubuğun rengini değiştirme
    d3.select(event.currentTarget)
      .attr("fill", "#ff6347"); // Kırmızıya boyama
  });

.on("click", (event, d) => {
    // Tıklanan bar çubuğunun verisini al
    const clickedData = d;
    
    // Burada clickedData ile istediğiniz işlemi gerçekleştirebilirsiniz
    console.log("Tıklanan veri: ", clickedData);
    
    // Örneğin, tıklanan bar çubuğunun rengini değiştirebilirsiniz:
    d3.select(event.currentTarget)
      .attr("fill", "#ff6347"); // Örneğin kırmızıya boyama

    // Burada bir başka işlem de yapılabilir, örneğin tıklanan veriyi bir üst bileşene gönderebilirsiniz.
  });
